# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class PortainerOAuthSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token_uri': 'str',
        'authorization_uri': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'default_team_id': 'int',
        'kube_secret_key': 'list[int]',
        'logout_uri': 'str',
        'o_auth_auto_create_users': 'bool',
        'redirect_uri': 'str',
        'resource_uri': 'str',
        'sso': 'bool',
        'scopes': 'str',
        'user_identifier': 'str'
    }

    attribute_map = {
        'access_token_uri': 'AccessTokenURI',
        'authorization_uri': 'AuthorizationURI',
        'client_id': 'ClientID',
        'client_secret': 'ClientSecret',
        'default_team_id': 'DefaultTeamID',
        'kube_secret_key': 'KubeSecretKey',
        'logout_uri': 'LogoutURI',
        'o_auth_auto_create_users': 'OAuthAutoCreateUsers',
        'redirect_uri': 'RedirectURI',
        'resource_uri': 'ResourceURI',
        'sso': 'SSO',
        'scopes': 'Scopes',
        'user_identifier': 'UserIdentifier'
    }

    def __init__(self, access_token_uri=None, authorization_uri=None, client_id=None, client_secret=None, default_team_id=None, kube_secret_key=None, logout_uri=None, o_auth_auto_create_users=None, redirect_uri=None, resource_uri=None, sso=None, scopes=None, user_identifier=None, _configuration=None):  # noqa: E501
        """PortainerOAuthSettings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token_uri = None
        self._authorization_uri = None
        self._client_id = None
        self._client_secret = None
        self._default_team_id = None
        self._kube_secret_key = None
        self._logout_uri = None
        self._o_auth_auto_create_users = None
        self._redirect_uri = None
        self._resource_uri = None
        self._sso = None
        self._scopes = None
        self._user_identifier = None
        self.discriminator = None

        if access_token_uri is not None:
            self.access_token_uri = access_token_uri
        if authorization_uri is not None:
            self.authorization_uri = authorization_uri
        if client_id is not None:
            self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        if default_team_id is not None:
            self.default_team_id = default_team_id
        if kube_secret_key is not None:
            self.kube_secret_key = kube_secret_key
        if logout_uri is not None:
            self.logout_uri = logout_uri
        if o_auth_auto_create_users is not None:
            self.o_auth_auto_create_users = o_auth_auto_create_users
        if redirect_uri is not None:
            self.redirect_uri = redirect_uri
        if resource_uri is not None:
            self.resource_uri = resource_uri
        if sso is not None:
            self.sso = sso
        if scopes is not None:
            self.scopes = scopes
        if user_identifier is not None:
            self.user_identifier = user_identifier

    @property
    def access_token_uri(self):
        """Gets the access_token_uri of this PortainerOAuthSettings.  # noqa: E501


        :return: The access_token_uri of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._access_token_uri

    @access_token_uri.setter
    def access_token_uri(self, access_token_uri):
        """Sets the access_token_uri of this PortainerOAuthSettings.


        :param access_token_uri: The access_token_uri of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._access_token_uri = access_token_uri

    @property
    def authorization_uri(self):
        """Gets the authorization_uri of this PortainerOAuthSettings.  # noqa: E501


        :return: The authorization_uri of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._authorization_uri

    @authorization_uri.setter
    def authorization_uri(self, authorization_uri):
        """Sets the authorization_uri of this PortainerOAuthSettings.


        :param authorization_uri: The authorization_uri of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._authorization_uri = authorization_uri

    @property
    def client_id(self):
        """Gets the client_id of this PortainerOAuthSettings.  # noqa: E501


        :return: The client_id of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PortainerOAuthSettings.


        :param client_id: The client_id of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this PortainerOAuthSettings.  # noqa: E501


        :return: The client_secret of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this PortainerOAuthSettings.


        :param client_secret: The client_secret of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def default_team_id(self):
        """Gets the default_team_id of this PortainerOAuthSettings.  # noqa: E501


        :return: The default_team_id of this PortainerOAuthSettings.  # noqa: E501
        :rtype: int
        """
        return self._default_team_id

    @default_team_id.setter
    def default_team_id(self, default_team_id):
        """Sets the default_team_id of this PortainerOAuthSettings.


        :param default_team_id: The default_team_id of this PortainerOAuthSettings.  # noqa: E501
        :type: int
        """

        self._default_team_id = default_team_id

    @property
    def kube_secret_key(self):
        """Gets the kube_secret_key of this PortainerOAuthSettings.  # noqa: E501


        :return: The kube_secret_key of this PortainerOAuthSettings.  # noqa: E501
        :rtype: list[int]
        """
        return self._kube_secret_key

    @kube_secret_key.setter
    def kube_secret_key(self, kube_secret_key):
        """Sets the kube_secret_key of this PortainerOAuthSettings.


        :param kube_secret_key: The kube_secret_key of this PortainerOAuthSettings.  # noqa: E501
        :type: list[int]
        """

        self._kube_secret_key = kube_secret_key

    @property
    def logout_uri(self):
        """Gets the logout_uri of this PortainerOAuthSettings.  # noqa: E501


        :return: The logout_uri of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._logout_uri

    @logout_uri.setter
    def logout_uri(self, logout_uri):
        """Sets the logout_uri of this PortainerOAuthSettings.


        :param logout_uri: The logout_uri of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._logout_uri = logout_uri

    @property
    def o_auth_auto_create_users(self):
        """Gets the o_auth_auto_create_users of this PortainerOAuthSettings.  # noqa: E501


        :return: The o_auth_auto_create_users of this PortainerOAuthSettings.  # noqa: E501
        :rtype: bool
        """
        return self._o_auth_auto_create_users

    @o_auth_auto_create_users.setter
    def o_auth_auto_create_users(self, o_auth_auto_create_users):
        """Sets the o_auth_auto_create_users of this PortainerOAuthSettings.


        :param o_auth_auto_create_users: The o_auth_auto_create_users of this PortainerOAuthSettings.  # noqa: E501
        :type: bool
        """

        self._o_auth_auto_create_users = o_auth_auto_create_users

    @property
    def redirect_uri(self):
        """Gets the redirect_uri of this PortainerOAuthSettings.  # noqa: E501


        :return: The redirect_uri of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._redirect_uri

    @redirect_uri.setter
    def redirect_uri(self, redirect_uri):
        """Sets the redirect_uri of this PortainerOAuthSettings.


        :param redirect_uri: The redirect_uri of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._redirect_uri = redirect_uri

    @property
    def resource_uri(self):
        """Gets the resource_uri of this PortainerOAuthSettings.  # noqa: E501


        :return: The resource_uri of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._resource_uri

    @resource_uri.setter
    def resource_uri(self, resource_uri):
        """Sets the resource_uri of this PortainerOAuthSettings.


        :param resource_uri: The resource_uri of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._resource_uri = resource_uri

    @property
    def sso(self):
        """Gets the sso of this PortainerOAuthSettings.  # noqa: E501


        :return: The sso of this PortainerOAuthSettings.  # noqa: E501
        :rtype: bool
        """
        return self._sso

    @sso.setter
    def sso(self, sso):
        """Sets the sso of this PortainerOAuthSettings.


        :param sso: The sso of this PortainerOAuthSettings.  # noqa: E501
        :type: bool
        """

        self._sso = sso

    @property
    def scopes(self):
        """Gets the scopes of this PortainerOAuthSettings.  # noqa: E501


        :return: The scopes of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this PortainerOAuthSettings.


        :param scopes: The scopes of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._scopes = scopes

    @property
    def user_identifier(self):
        """Gets the user_identifier of this PortainerOAuthSettings.  # noqa: E501


        :return: The user_identifier of this PortainerOAuthSettings.  # noqa: E501
        :rtype: str
        """
        return self._user_identifier

    @user_identifier.setter
    def user_identifier(self, user_identifier):
        """Sets the user_identifier of this PortainerOAuthSettings.


        :param user_identifier: The user_identifier of this PortainerOAuthSettings.  # noqa: E501
        :type: str
        """

        self._user_identifier = user_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerOAuthSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerOAuthSettings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerOAuthSettings):
            return True

        return self.to_dict() != other.to_dict()
