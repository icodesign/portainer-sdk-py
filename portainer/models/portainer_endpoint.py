# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class PortainerEndpoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorized_teams': 'list[int]',
        'authorized_users': 'list[int]',
        'azure_credentials': 'PortainerAzureCredentials',
        'compose_syntax_max_version': 'str',
        'edge_checkin_interval': 'int',
        'edge_id': 'str',
        'edge_key': 'str',
        'extensions': 'list[PortainerEndpointExtension]',
        'group_id': 'int',
        'id': 'int',
        'kubernetes': 'PortainerKubernetesData',
        'name': 'str',
        'public_url': 'str',
        'snapshots': 'list[PortainerDockerSnapshot]',
        'status': 'int',
        'tls': 'bool',
        'tlsca_cert': 'str',
        'tls_cert': 'str',
        'tls_config': 'PortainerTLSConfiguration',
        'tls_key': 'str',
        'tag_ids': 'list[int]',
        'tags': 'list[str]',
        'team_access_policies': 'PortainerTeamAccessPolicies',
        'type': 'int',
        'url': 'str',
        'user_access_policies': 'PortainerUserAccessPolicies',
        'last_check_in_date': 'int',
        'security_settings': 'PortainerEndpointSecuritySettings'
    }

    attribute_map = {
        'authorized_teams': 'AuthorizedTeams',
        'authorized_users': 'AuthorizedUsers',
        'azure_credentials': 'AzureCredentials',
        'compose_syntax_max_version': 'ComposeSyntaxMaxVersion',
        'edge_checkin_interval': 'EdgeCheckinInterval',
        'edge_id': 'EdgeID',
        'edge_key': 'EdgeKey',
        'extensions': 'Extensions',
        'group_id': 'GroupId',
        'id': 'Id',
        'kubernetes': 'Kubernetes',
        'name': 'Name',
        'public_url': 'PublicURL',
        'snapshots': 'Snapshots',
        'status': 'Status',
        'tls': 'TLS',
        'tlsca_cert': 'TLSCACert',
        'tls_cert': 'TLSCert',
        'tls_config': 'TLSConfig',
        'tls_key': 'TLSKey',
        'tag_ids': 'TagIds',
        'tags': 'Tags',
        'team_access_policies': 'TeamAccessPolicies',
        'type': 'Type',
        'url': 'URL',
        'user_access_policies': 'UserAccessPolicies',
        'last_check_in_date': 'lastCheckInDate',
        'security_settings': 'securitySettings'
    }

    def __init__(self, authorized_teams=None, authorized_users=None, azure_credentials=None, compose_syntax_max_version=None, edge_checkin_interval=None, edge_id=None, edge_key=None, extensions=None, group_id=None, id=None, kubernetes=None, name=None, public_url=None, snapshots=None, status=None, tls=None, tlsca_cert=None, tls_cert=None, tls_config=None, tls_key=None, tag_ids=None, tags=None, team_access_policies=None, type=None, url=None, user_access_policies=None, last_check_in_date=None, security_settings=None, _configuration=None):  # noqa: E501
        """PortainerEndpoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorized_teams = None
        self._authorized_users = None
        self._azure_credentials = None
        self._compose_syntax_max_version = None
        self._edge_checkin_interval = None
        self._edge_id = None
        self._edge_key = None
        self._extensions = None
        self._group_id = None
        self._id = None
        self._kubernetes = None
        self._name = None
        self._public_url = None
        self._snapshots = None
        self._status = None
        self._tls = None
        self._tlsca_cert = None
        self._tls_cert = None
        self._tls_config = None
        self._tls_key = None
        self._tag_ids = None
        self._tags = None
        self._team_access_policies = None
        self._type = None
        self._url = None
        self._user_access_policies = None
        self._last_check_in_date = None
        self._security_settings = None
        self.discriminator = None

        if authorized_teams is not None:
            self.authorized_teams = authorized_teams
        if authorized_users is not None:
            self.authorized_users = authorized_users
        if azure_credentials is not None:
            self.azure_credentials = azure_credentials
        if compose_syntax_max_version is not None:
            self.compose_syntax_max_version = compose_syntax_max_version
        if edge_checkin_interval is not None:
            self.edge_checkin_interval = edge_checkin_interval
        if edge_id is not None:
            self.edge_id = edge_id
        if edge_key is not None:
            self.edge_key = edge_key
        if extensions is not None:
            self.extensions = extensions
        if group_id is not None:
            self.group_id = group_id
        if id is not None:
            self.id = id
        if kubernetes is not None:
            self.kubernetes = kubernetes
        if name is not None:
            self.name = name
        if public_url is not None:
            self.public_url = public_url
        if snapshots is not None:
            self.snapshots = snapshots
        if status is not None:
            self.status = status
        if tls is not None:
            self.tls = tls
        if tlsca_cert is not None:
            self.tlsca_cert = tlsca_cert
        if tls_cert is not None:
            self.tls_cert = tls_cert
        if tls_config is not None:
            self.tls_config = tls_config
        if tls_key is not None:
            self.tls_key = tls_key
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tags is not None:
            self.tags = tags
        if team_access_policies is not None:
            self.team_access_policies = team_access_policies
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if user_access_policies is not None:
            self.user_access_policies = user_access_policies
        if last_check_in_date is not None:
            self.last_check_in_date = last_check_in_date
        if security_settings is not None:
            self.security_settings = security_settings

    @property
    def authorized_teams(self):
        """Gets the authorized_teams of this PortainerEndpoint.  # noqa: E501


        :return: The authorized_teams of this PortainerEndpoint.  # noqa: E501
        :rtype: list[int]
        """
        return self._authorized_teams

    @authorized_teams.setter
    def authorized_teams(self, authorized_teams):
        """Sets the authorized_teams of this PortainerEndpoint.


        :param authorized_teams: The authorized_teams of this PortainerEndpoint.  # noqa: E501
        :type: list[int]
        """

        self._authorized_teams = authorized_teams

    @property
    def authorized_users(self):
        """Gets the authorized_users of this PortainerEndpoint.  # noqa: E501

        Deprecated in DBVersion == 18  # noqa: E501

        :return: The authorized_users of this PortainerEndpoint.  # noqa: E501
        :rtype: list[int]
        """
        return self._authorized_users

    @authorized_users.setter
    def authorized_users(self, authorized_users):
        """Sets the authorized_users of this PortainerEndpoint.

        Deprecated in DBVersion == 18  # noqa: E501

        :param authorized_users: The authorized_users of this PortainerEndpoint.  # noqa: E501
        :type: list[int]
        """

        self._authorized_users = authorized_users

    @property
    def azure_credentials(self):
        """Gets the azure_credentials of this PortainerEndpoint.  # noqa: E501


        :return: The azure_credentials of this PortainerEndpoint.  # noqa: E501
        :rtype: PortainerAzureCredentials
        """
        return self._azure_credentials

    @azure_credentials.setter
    def azure_credentials(self, azure_credentials):
        """Sets the azure_credentials of this PortainerEndpoint.


        :param azure_credentials: The azure_credentials of this PortainerEndpoint.  # noqa: E501
        :type: PortainerAzureCredentials
        """

        self._azure_credentials = azure_credentials

    @property
    def compose_syntax_max_version(self):
        """Gets the compose_syntax_max_version of this PortainerEndpoint.  # noqa: E501

        Maximum version of docker-compose  # noqa: E501

        :return: The compose_syntax_max_version of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._compose_syntax_max_version

    @compose_syntax_max_version.setter
    def compose_syntax_max_version(self, compose_syntax_max_version):
        """Sets the compose_syntax_max_version of this PortainerEndpoint.

        Maximum version of docker-compose  # noqa: E501

        :param compose_syntax_max_version: The compose_syntax_max_version of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._compose_syntax_max_version = compose_syntax_max_version

    @property
    def edge_checkin_interval(self):
        """Gets the edge_checkin_interval of this PortainerEndpoint.  # noqa: E501

        The check in interval for edge agent (in seconds)  # noqa: E501

        :return: The edge_checkin_interval of this PortainerEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._edge_checkin_interval

    @edge_checkin_interval.setter
    def edge_checkin_interval(self, edge_checkin_interval):
        """Sets the edge_checkin_interval of this PortainerEndpoint.

        The check in interval for edge agent (in seconds)  # noqa: E501

        :param edge_checkin_interval: The edge_checkin_interval of this PortainerEndpoint.  # noqa: E501
        :type: int
        """

        self._edge_checkin_interval = edge_checkin_interval

    @property
    def edge_id(self):
        """Gets the edge_id of this PortainerEndpoint.  # noqa: E501

        The identifier of the edge agent associated with this environment(endpoint)  # noqa: E501

        :return: The edge_id of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._edge_id

    @edge_id.setter
    def edge_id(self, edge_id):
        """Sets the edge_id of this PortainerEndpoint.

        The identifier of the edge agent associated with this environment(endpoint)  # noqa: E501

        :param edge_id: The edge_id of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._edge_id = edge_id

    @property
    def edge_key(self):
        """Gets the edge_key of this PortainerEndpoint.  # noqa: E501

        The key which is used to map the agent to Portainer  # noqa: E501

        :return: The edge_key of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._edge_key

    @edge_key.setter
    def edge_key(self, edge_key):
        """Sets the edge_key of this PortainerEndpoint.

        The key which is used to map the agent to Portainer  # noqa: E501

        :param edge_key: The edge_key of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._edge_key = edge_key

    @property
    def extensions(self):
        """Gets the extensions of this PortainerEndpoint.  # noqa: E501


        :return: The extensions of this PortainerEndpoint.  # noqa: E501
        :rtype: list[PortainerEndpointExtension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this PortainerEndpoint.


        :param extensions: The extensions of this PortainerEndpoint.  # noqa: E501
        :type: list[PortainerEndpointExtension]
        """

        self._extensions = extensions

    @property
    def group_id(self):
        """Gets the group_id of this PortainerEndpoint.  # noqa: E501

        Environment(Endpoint) group identifier  # noqa: E501

        :return: The group_id of this PortainerEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this PortainerEndpoint.

        Environment(Endpoint) group identifier  # noqa: E501

        :param group_id: The group_id of this PortainerEndpoint.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def id(self):
        """Gets the id of this PortainerEndpoint.  # noqa: E501

        Environment(Endpoint) Identifier  # noqa: E501

        :return: The id of this PortainerEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortainerEndpoint.

        Environment(Endpoint) Identifier  # noqa: E501

        :param id: The id of this PortainerEndpoint.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def kubernetes(self):
        """Gets the kubernetes of this PortainerEndpoint.  # noqa: E501

        Associated Kubernetes data  # noqa: E501

        :return: The kubernetes of this PortainerEndpoint.  # noqa: E501
        :rtype: PortainerKubernetesData
        """
        return self._kubernetes

    @kubernetes.setter
    def kubernetes(self, kubernetes):
        """Sets the kubernetes of this PortainerEndpoint.

        Associated Kubernetes data  # noqa: E501

        :param kubernetes: The kubernetes of this PortainerEndpoint.  # noqa: E501
        :type: PortainerKubernetesData
        """

        self._kubernetes = kubernetes

    @property
    def name(self):
        """Gets the name of this PortainerEndpoint.  # noqa: E501

        Environment(Endpoint) name  # noqa: E501

        :return: The name of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortainerEndpoint.

        Environment(Endpoint) name  # noqa: E501

        :param name: The name of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def public_url(self):
        """Gets the public_url of this PortainerEndpoint.  # noqa: E501

        URL or IP address where exposed containers will be reachable  # noqa: E501

        :return: The public_url of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._public_url

    @public_url.setter
    def public_url(self, public_url):
        """Sets the public_url of this PortainerEndpoint.

        URL or IP address where exposed containers will be reachable  # noqa: E501

        :param public_url: The public_url of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._public_url = public_url

    @property
    def snapshots(self):
        """Gets the snapshots of this PortainerEndpoint.  # noqa: E501

        List of snapshots  # noqa: E501

        :return: The snapshots of this PortainerEndpoint.  # noqa: E501
        :rtype: list[PortainerDockerSnapshot]
        """
        return self._snapshots

    @snapshots.setter
    def snapshots(self, snapshots):
        """Sets the snapshots of this PortainerEndpoint.

        List of snapshots  # noqa: E501

        :param snapshots: The snapshots of this PortainerEndpoint.  # noqa: E501
        :type: list[PortainerDockerSnapshot]
        """

        self._snapshots = snapshots

    @property
    def status(self):
        """Gets the status of this PortainerEndpoint.  # noqa: E501

        The status of the environment(endpoint) (1 - up, 2 - down)  # noqa: E501

        :return: The status of this PortainerEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PortainerEndpoint.

        The status of the environment(endpoint) (1 - up, 2 - down)  # noqa: E501

        :param status: The status of this PortainerEndpoint.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def tls(self):
        """Gets the tls of this PortainerEndpoint.  # noqa: E501

        Deprecated fields Deprecated in DBVersion == 4  # noqa: E501

        :return: The tls of this PortainerEndpoint.  # noqa: E501
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this PortainerEndpoint.

        Deprecated fields Deprecated in DBVersion == 4  # noqa: E501

        :param tls: The tls of this PortainerEndpoint.  # noqa: E501
        :type: bool
        """

        self._tls = tls

    @property
    def tlsca_cert(self):
        """Gets the tlsca_cert of this PortainerEndpoint.  # noqa: E501


        :return: The tlsca_cert of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._tlsca_cert

    @tlsca_cert.setter
    def tlsca_cert(self, tlsca_cert):
        """Sets the tlsca_cert of this PortainerEndpoint.


        :param tlsca_cert: The tlsca_cert of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._tlsca_cert = tlsca_cert

    @property
    def tls_cert(self):
        """Gets the tls_cert of this PortainerEndpoint.  # noqa: E501


        :return: The tls_cert of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._tls_cert

    @tls_cert.setter
    def tls_cert(self, tls_cert):
        """Sets the tls_cert of this PortainerEndpoint.


        :param tls_cert: The tls_cert of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._tls_cert = tls_cert

    @property
    def tls_config(self):
        """Gets the tls_config of this PortainerEndpoint.  # noqa: E501


        :return: The tls_config of this PortainerEndpoint.  # noqa: E501
        :rtype: PortainerTLSConfiguration
        """
        return self._tls_config

    @tls_config.setter
    def tls_config(self, tls_config):
        """Sets the tls_config of this PortainerEndpoint.


        :param tls_config: The tls_config of this PortainerEndpoint.  # noqa: E501
        :type: PortainerTLSConfiguration
        """

        self._tls_config = tls_config

    @property
    def tls_key(self):
        """Gets the tls_key of this PortainerEndpoint.  # noqa: E501


        :return: The tls_key of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._tls_key

    @tls_key.setter
    def tls_key(self, tls_key):
        """Sets the tls_key of this PortainerEndpoint.


        :param tls_key: The tls_key of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._tls_key = tls_key

    @property
    def tag_ids(self):
        """Gets the tag_ids of this PortainerEndpoint.  # noqa: E501

        List of tag identifiers to which this environment(endpoint) is associated  # noqa: E501

        :return: The tag_ids of this PortainerEndpoint.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this PortainerEndpoint.

        List of tag identifiers to which this environment(endpoint) is associated  # noqa: E501

        :param tag_ids: The tag_ids of this PortainerEndpoint.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tags(self):
        """Gets the tags of this PortainerEndpoint.  # noqa: E501

        Deprecated in DBVersion == 22  # noqa: E501

        :return: The tags of this PortainerEndpoint.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PortainerEndpoint.

        Deprecated in DBVersion == 22  # noqa: E501

        :param tags: The tags of this PortainerEndpoint.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def team_access_policies(self):
        """Gets the team_access_policies of this PortainerEndpoint.  # noqa: E501

        List of team identifiers authorized to connect to this environment(endpoint)  # noqa: E501

        :return: The team_access_policies of this PortainerEndpoint.  # noqa: E501
        :rtype: PortainerTeamAccessPolicies
        """
        return self._team_access_policies

    @team_access_policies.setter
    def team_access_policies(self, team_access_policies):
        """Sets the team_access_policies of this PortainerEndpoint.

        List of team identifiers authorized to connect to this environment(endpoint)  # noqa: E501

        :param team_access_policies: The team_access_policies of this PortainerEndpoint.  # noqa: E501
        :type: PortainerTeamAccessPolicies
        """

        self._team_access_policies = team_access_policies

    @property
    def type(self):
        """Gets the type of this PortainerEndpoint.  # noqa: E501

        Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint).  # noqa: E501

        :return: The type of this PortainerEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PortainerEndpoint.

        Environment(Endpoint) environment(endpoint) type. 1 for a Docker environment(endpoint), 2 for an agent on Docker environment(endpoint) or 3 for an Azure environment(endpoint).  # noqa: E501

        :param type: The type of this PortainerEndpoint.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this PortainerEndpoint.  # noqa: E501

        URL or IP address of the Docker host associated to this environment(endpoint)  # noqa: E501

        :return: The url of this PortainerEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PortainerEndpoint.

        URL or IP address of the Docker host associated to this environment(endpoint)  # noqa: E501

        :param url: The url of this PortainerEndpoint.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_access_policies(self):
        """Gets the user_access_policies of this PortainerEndpoint.  # noqa: E501

        List of user identifiers authorized to connect to this environment(endpoint)  # noqa: E501

        :return: The user_access_policies of this PortainerEndpoint.  # noqa: E501
        :rtype: PortainerUserAccessPolicies
        """
        return self._user_access_policies

    @user_access_policies.setter
    def user_access_policies(self, user_access_policies):
        """Sets the user_access_policies of this PortainerEndpoint.

        List of user identifiers authorized to connect to this environment(endpoint)  # noqa: E501

        :param user_access_policies: The user_access_policies of this PortainerEndpoint.  # noqa: E501
        :type: PortainerUserAccessPolicies
        """

        self._user_access_policies = user_access_policies

    @property
    def last_check_in_date(self):
        """Gets the last_check_in_date of this PortainerEndpoint.  # noqa: E501

        LastCheckInDate mark last check-in date on checkin  # noqa: E501

        :return: The last_check_in_date of this PortainerEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._last_check_in_date

    @last_check_in_date.setter
    def last_check_in_date(self, last_check_in_date):
        """Sets the last_check_in_date of this PortainerEndpoint.

        LastCheckInDate mark last check-in date on checkin  # noqa: E501

        :param last_check_in_date: The last_check_in_date of this PortainerEndpoint.  # noqa: E501
        :type: int
        """

        self._last_check_in_date = last_check_in_date

    @property
    def security_settings(self):
        """Gets the security_settings of this PortainerEndpoint.  # noqa: E501

        Environment(Endpoint) specific security settings  # noqa: E501

        :return: The security_settings of this PortainerEndpoint.  # noqa: E501
        :rtype: PortainerEndpointSecuritySettings
        """
        return self._security_settings

    @security_settings.setter
    def security_settings(self, security_settings):
        """Sets the security_settings of this PortainerEndpoint.

        Environment(Endpoint) specific security settings  # noqa: E501

        :param security_settings: The security_settings of this PortainerEndpoint.  # noqa: E501
        :type: PortainerEndpointSecuritySettings
        """

        self._security_settings = security_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerEndpoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerEndpoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerEndpoint):
            return True

        return self.to_dict() != other.to_dict()
