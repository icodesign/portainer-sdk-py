# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class ReleaseHook(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_policies': 'list[str]',
        'events': 'list[str]',
        'kind': 'str',
        'last_run': 'ReleaseHookExecution',
        'manifest': 'str',
        'name': 'str',
        'path': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'delete_policies': 'delete_policies',
        'events': 'events',
        'kind': 'kind',
        'last_run': 'last_run',
        'manifest': 'manifest',
        'name': 'name',
        'path': 'path',
        'weight': 'weight'
    }

    def __init__(self, delete_policies=None, events=None, kind=None, last_run=None, manifest=None, name=None, path=None, weight=None, _configuration=None):  # noqa: E501
        """ReleaseHook - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._delete_policies = None
        self._events = None
        self._kind = None
        self._last_run = None
        self._manifest = None
        self._name = None
        self._path = None
        self._weight = None
        self.discriminator = None

        if delete_policies is not None:
            self.delete_policies = delete_policies
        if events is not None:
            self.events = events
        if kind is not None:
            self.kind = kind
        if last_run is not None:
            self.last_run = last_run
        if manifest is not None:
            self.manifest = manifest
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if weight is not None:
            self.weight = weight

    @property
    def delete_policies(self):
        """Gets the delete_policies of this ReleaseHook.  # noqa: E501

        DeletePolicies are the policies that indicate when to delete the hook  # noqa: E501

        :return: The delete_policies of this ReleaseHook.  # noqa: E501
        :rtype: list[str]
        """
        return self._delete_policies

    @delete_policies.setter
    def delete_policies(self, delete_policies):
        """Sets the delete_policies of this ReleaseHook.

        DeletePolicies are the policies that indicate when to delete the hook  # noqa: E501

        :param delete_policies: The delete_policies of this ReleaseHook.  # noqa: E501
        :type: list[str]
        """

        self._delete_policies = delete_policies

    @property
    def events(self):
        """Gets the events of this ReleaseHook.  # noqa: E501

        Events are the events that this hook fires on.  # noqa: E501

        :return: The events of this ReleaseHook.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this ReleaseHook.

        Events are the events that this hook fires on.  # noqa: E501

        :param events: The events of this ReleaseHook.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def kind(self):
        """Gets the kind of this ReleaseHook.  # noqa: E501

        Kind is the Kubernetes kind.  # noqa: E501

        :return: The kind of this ReleaseHook.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReleaseHook.

        Kind is the Kubernetes kind.  # noqa: E501

        :param kind: The kind of this ReleaseHook.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def last_run(self):
        """Gets the last_run of this ReleaseHook.  # noqa: E501

        LastRun indicates the date/time this was last run.  # noqa: E501

        :return: The last_run of this ReleaseHook.  # noqa: E501
        :rtype: ReleaseHookExecution
        """
        return self._last_run

    @last_run.setter
    def last_run(self, last_run):
        """Sets the last_run of this ReleaseHook.

        LastRun indicates the date/time this was last run.  # noqa: E501

        :param last_run: The last_run of this ReleaseHook.  # noqa: E501
        :type: ReleaseHookExecution
        """

        self._last_run = last_run

    @property
    def manifest(self):
        """Gets the manifest of this ReleaseHook.  # noqa: E501

        Manifest is the manifest contents.  # noqa: E501

        :return: The manifest of this ReleaseHook.  # noqa: E501
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ReleaseHook.

        Manifest is the manifest contents.  # noqa: E501

        :param manifest: The manifest of this ReleaseHook.  # noqa: E501
        :type: str
        """

        self._manifest = manifest

    @property
    def name(self):
        """Gets the name of this ReleaseHook.  # noqa: E501


        :return: The name of this ReleaseHook.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseHook.


        :param name: The name of this ReleaseHook.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ReleaseHook.  # noqa: E501

        Path is the chart-relative path to the template.  # noqa: E501

        :return: The path of this ReleaseHook.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ReleaseHook.

        Path is the chart-relative path to the template.  # noqa: E501

        :param path: The path of this ReleaseHook.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def weight(self):
        """Gets the weight of this ReleaseHook.  # noqa: E501

        Weight indicates the sort order for execution among similar Hook type  # noqa: E501

        :return: The weight of this ReleaseHook.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this ReleaseHook.

        Weight indicates the sort order for execution among similar Hook type  # noqa: E501

        :param weight: The weight of this ReleaseHook.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseHook, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseHook):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleaseHook):
            return True

        return self.to_dict() != other.to_dict()
