# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class CustomtemplatesCustomTemplateUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'file_content': 'str',
        'logo': 'str',
        'note': 'str',
        'platform': 'int',
        'title': 'str',
        'type': 'int'
    }

    attribute_map = {
        'description': 'description',
        'file_content': 'fileContent',
        'logo': 'logo',
        'note': 'note',
        'platform': 'platform',
        'title': 'title',
        'type': 'type'
    }

    def __init__(self, description=None, file_content=None, logo=None, note=None, platform=None, title=None, type=None, _configuration=None):  # noqa: E501
        """CustomtemplatesCustomTemplateUpdatePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._description = None
        self._file_content = None
        self._logo = None
        self._note = None
        self._platform = None
        self._title = None
        self._type = None
        self.discriminator = None

        self.description = description
        self.file_content = file_content
        if logo is not None:
            self.logo = logo
        if note is not None:
            self.note = note
        if platform is not None:
            self.platform = platform
        self.title = title
        self.type = type

    @property
    def description(self):
        """Gets the description of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        Description of the template  # noqa: E501

        :return: The description of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomtemplatesCustomTemplateUpdatePayload.

        Description of the template  # noqa: E501

        :param description: The description of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def file_content(self):
        """Gets the file_content of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        Content of stack file  # noqa: E501

        :return: The file_content of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._file_content

    @file_content.setter
    def file_content(self, file_content):
        """Sets the file_content of this CustomtemplatesCustomTemplateUpdatePayload.

        Content of stack file  # noqa: E501

        :param file_content: The file_content of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_content is None:
            raise ValueError("Invalid value for `file_content`, must not be `None`")  # noqa: E501

        self._file_content = file_content

    @property
    def logo(self):
        """Gets the logo of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        URL of the template's logo  # noqa: E501

        :return: The logo of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this CustomtemplatesCustomTemplateUpdatePayload.

        URL of the template's logo  # noqa: E501

        :param logo: The logo of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def note(self):
        """Gets the note of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        A note that will be displayed in the UI. Supports HTML content  # noqa: E501

        :return: The note of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this CustomtemplatesCustomTemplateUpdatePayload.

        A note that will be displayed in the UI. Supports HTML content  # noqa: E501

        :param note: The note of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def platform(self):
        """Gets the platform of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        Platform associated to the template. Valid values are: 1 - 'linux', 2 - 'windows' Required for Docker stacks  # noqa: E501

        :return: The platform of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this CustomtemplatesCustomTemplateUpdatePayload.

        Platform associated to the template. Valid values are: 1 - 'linux', 2 - 'windows' Required for Docker stacks  # noqa: E501

        :param platform: The platform of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: int
        """

        self._platform = platform

    @property
    def title(self):
        """Gets the title of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        Title of the template  # noqa: E501

        :return: The title of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CustomtemplatesCustomTemplateUpdatePayload.

        Title of the template  # noqa: E501

        :param title: The title of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self):
        """Gets the type of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501

        Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)  # noqa: E501

        :return: The type of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomtemplatesCustomTemplateUpdatePayload.

        Type of created stack (1 - swarm, 2 - compose, 3 - kubernetes)  # noqa: E501

        :param type: The type of this CustomtemplatesCustomTemplateUpdatePayload.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomtemplatesCustomTemplateUpdatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomtemplatesCustomTemplateUpdatePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomtemplatesCustomTemplateUpdatePayload):
            return True

        return self.to_dict() != other.to_dict()
