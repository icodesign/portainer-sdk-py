# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class ResourcecontrolsResourceControlUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administrators_only': 'bool',
        'public': 'bool',
        'teams': 'list[int]',
        'users': 'list[int]'
    }

    attribute_map = {
        'administrators_only': 'administratorsOnly',
        'public': 'public',
        'teams': 'teams',
        'users': 'users'
    }

    def __init__(self, administrators_only=None, public=None, teams=None, users=None, _configuration=None):  # noqa: E501
        """ResourcecontrolsResourceControlUpdatePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._administrators_only = None
        self._public = None
        self._teams = None
        self._users = None
        self.discriminator = None

        if administrators_only is not None:
            self.administrators_only = administrators_only
        if public is not None:
            self.public = public
        if teams is not None:
            self.teams = teams
        if users is not None:
            self.users = users

    @property
    def administrators_only(self):
        """Gets the administrators_only of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501

        Permit access to resource only to admins  # noqa: E501

        :return: The administrators_only of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._administrators_only

    @administrators_only.setter
    def administrators_only(self, administrators_only):
        """Sets the administrators_only of this ResourcecontrolsResourceControlUpdatePayload.

        Permit access to resource only to admins  # noqa: E501

        :param administrators_only: The administrators_only of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._administrators_only = administrators_only

    @property
    def public(self):
        """Gets the public of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501

        Permit access to the associated resource to any user  # noqa: E501

        :return: The public of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ResourcecontrolsResourceControlUpdatePayload.

        Permit access to the associated resource to any user  # noqa: E501

        :param public: The public of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def teams(self):
        """Gets the teams of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501

        List of team identifiers with access to the associated resource  # noqa: E501

        :return: The teams of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._teams

    @teams.setter
    def teams(self, teams):
        """Sets the teams of this ResourcecontrolsResourceControlUpdatePayload.

        List of team identifiers with access to the associated resource  # noqa: E501

        :param teams: The teams of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :type: list[int]
        """

        self._teams = teams

    @property
    def users(self):
        """Gets the users of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501

        List of user identifiers with access to the associated resource  # noqa: E501

        :return: The users of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this ResourcecontrolsResourceControlUpdatePayload.

        List of user identifiers with access to the associated resource  # noqa: E501

        :param users: The users of this ResourcecontrolsResourceControlUpdatePayload.  # noqa: E501
        :type: list[int]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ResourcecontrolsResourceControlUpdatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourcecontrolsResourceControlUpdatePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResourcecontrolsResourceControlUpdatePayload):
            return True

        return self.to_dict() != other.to_dict()
