# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class PortainerStack(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_files': 'list[str]',
        'auto_update': 'PortainerStackAutoUpdate',
        'endpoint_id': 'int',
        'entry_point': 'str',
        'env': 'list[PortainerPair]',
        'id': 'int',
        'name': 'str',
        'resource_control': 'PortainerResourceControl',
        'status': 'int',
        'swarm_id': 'str',
        'type': 'int',
        'created_by': 'str',
        'creation_date': 'int',
        'git_config': 'GittypesRepoConfig',
        'is_compose_format': 'bool',
        'namespace': 'str',
        'project_path': 'str',
        'update_date': 'int',
        'updated_by': 'str'
    }

    attribute_map = {
        'additional_files': 'AdditionalFiles',
        'auto_update': 'AutoUpdate',
        'endpoint_id': 'EndpointId',
        'entry_point': 'EntryPoint',
        'env': 'Env',
        'id': 'Id',
        'name': 'Name',
        'resource_control': 'ResourceControl',
        'status': 'Status',
        'swarm_id': 'SwarmId',
        'type': 'Type',
        'created_by': 'createdBy',
        'creation_date': 'creationDate',
        'git_config': 'gitConfig',
        'is_compose_format': 'isComposeFormat',
        'namespace': 'namespace',
        'project_path': 'projectPath',
        'update_date': 'updateDate',
        'updated_by': 'updatedBy'
    }

    def __init__(self, additional_files=None, auto_update=None, endpoint_id=None, entry_point=None, env=None, id=None, name=None, resource_control=None, status=None, swarm_id=None, type=None, created_by=None, creation_date=None, git_config=None, is_compose_format=None, namespace=None, project_path=None, update_date=None, updated_by=None, _configuration=None):  # noqa: E501
        """PortainerStack - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._additional_files = None
        self._auto_update = None
        self._endpoint_id = None
        self._entry_point = None
        self._env = None
        self._id = None
        self._name = None
        self._resource_control = None
        self._status = None
        self._swarm_id = None
        self._type = None
        self._created_by = None
        self._creation_date = None
        self._git_config = None
        self._is_compose_format = None
        self._namespace = None
        self._project_path = None
        self._update_date = None
        self._updated_by = None
        self.discriminator = None

        if additional_files is not None:
            self.additional_files = additional_files
        if auto_update is not None:
            self.auto_update = auto_update
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if entry_point is not None:
            self.entry_point = entry_point
        if env is not None:
            self.env = env
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if resource_control is not None:
            self.resource_control = resource_control
        if status is not None:
            self.status = status
        if swarm_id is not None:
            self.swarm_id = swarm_id
        if type is not None:
            self.type = type
        if created_by is not None:
            self.created_by = created_by
        if creation_date is not None:
            self.creation_date = creation_date
        if git_config is not None:
            self.git_config = git_config
        if is_compose_format is not None:
            self.is_compose_format = is_compose_format
        if namespace is not None:
            self.namespace = namespace
        if project_path is not None:
            self.project_path = project_path
        if update_date is not None:
            self.update_date = update_date
        if updated_by is not None:
            self.updated_by = updated_by

    @property
    def additional_files(self):
        """Gets the additional_files of this PortainerStack.  # noqa: E501

        Only applies when deploying stack with multiple files  # noqa: E501

        :return: The additional_files of this PortainerStack.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_files

    @additional_files.setter
    def additional_files(self, additional_files):
        """Sets the additional_files of this PortainerStack.

        Only applies when deploying stack with multiple files  # noqa: E501

        :param additional_files: The additional_files of this PortainerStack.  # noqa: E501
        :type: list[str]
        """

        self._additional_files = additional_files

    @property
    def auto_update(self):
        """Gets the auto_update of this PortainerStack.  # noqa: E501

        The auto update settings of a git stack  # noqa: E501

        :return: The auto_update of this PortainerStack.  # noqa: E501
        :rtype: PortainerStackAutoUpdate
        """
        return self._auto_update

    @auto_update.setter
    def auto_update(self, auto_update):
        """Sets the auto_update of this PortainerStack.

        The auto update settings of a git stack  # noqa: E501

        :param auto_update: The auto_update of this PortainerStack.  # noqa: E501
        :type: PortainerStackAutoUpdate
        """

        self._auto_update = auto_update

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this PortainerStack.  # noqa: E501

        Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment  # noqa: E501

        :return: The endpoint_id of this PortainerStack.  # noqa: E501
        :rtype: int
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this PortainerStack.

        Environment(Endpoint) identifier. Reference the environment(endpoint) that will be used for deployment  # noqa: E501

        :param endpoint_id: The endpoint_id of this PortainerStack.  # noqa: E501
        :type: int
        """

        self._endpoint_id = endpoint_id

    @property
    def entry_point(self):
        """Gets the entry_point of this PortainerStack.  # noqa: E501

        Path to the Stack file  # noqa: E501

        :return: The entry_point of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._entry_point

    @entry_point.setter
    def entry_point(self, entry_point):
        """Sets the entry_point of this PortainerStack.

        Path to the Stack file  # noqa: E501

        :param entry_point: The entry_point of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._entry_point = entry_point

    @property
    def env(self):
        """Gets the env of this PortainerStack.  # noqa: E501

        A list of environment(endpoint) variables used during stack deployment  # noqa: E501

        :return: The env of this PortainerStack.  # noqa: E501
        :rtype: list[PortainerPair]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this PortainerStack.

        A list of environment(endpoint) variables used during stack deployment  # noqa: E501

        :param env: The env of this PortainerStack.  # noqa: E501
        :type: list[PortainerPair]
        """

        self._env = env

    @property
    def id(self):
        """Gets the id of this PortainerStack.  # noqa: E501

        Stack Identifier  # noqa: E501

        :return: The id of this PortainerStack.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortainerStack.

        Stack Identifier  # noqa: E501

        :param id: The id of this PortainerStack.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PortainerStack.  # noqa: E501

        Stack name  # noqa: E501

        :return: The name of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortainerStack.

        Stack name  # noqa: E501

        :param name: The name of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def resource_control(self):
        """Gets the resource_control of this PortainerStack.  # noqa: E501


        :return: The resource_control of this PortainerStack.  # noqa: E501
        :rtype: PortainerResourceControl
        """
        return self._resource_control

    @resource_control.setter
    def resource_control(self, resource_control):
        """Sets the resource_control of this PortainerStack.


        :param resource_control: The resource_control of this PortainerStack.  # noqa: E501
        :type: PortainerResourceControl
        """

        self._resource_control = resource_control

    @property
    def status(self):
        """Gets the status of this PortainerStack.  # noqa: E501

        Stack status (1 - active, 2 - inactive)  # noqa: E501

        :return: The status of this PortainerStack.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PortainerStack.

        Stack status (1 - active, 2 - inactive)  # noqa: E501

        :param status: The status of this PortainerStack.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def swarm_id(self):
        """Gets the swarm_id of this PortainerStack.  # noqa: E501

        Cluster identifier of the Swarm cluster where the stack is deployed  # noqa: E501

        :return: The swarm_id of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._swarm_id

    @swarm_id.setter
    def swarm_id(self, swarm_id):
        """Sets the swarm_id of this PortainerStack.

        Cluster identifier of the Swarm cluster where the stack is deployed  # noqa: E501

        :param swarm_id: The swarm_id of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._swarm_id = swarm_id

    @property
    def type(self):
        """Gets the type of this PortainerStack.  # noqa: E501

        Stack type. 1 for a Swarm stack, 2 for a Compose stack  # noqa: E501

        :return: The type of this PortainerStack.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PortainerStack.

        Stack type. 1 for a Swarm stack, 2 for a Compose stack  # noqa: E501

        :param type: The type of this PortainerStack.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def created_by(self):
        """Gets the created_by of this PortainerStack.  # noqa: E501

        The username which created this stack  # noqa: E501

        :return: The created_by of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this PortainerStack.

        The username which created this stack  # noqa: E501

        :param created_by: The created_by of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def creation_date(self):
        """Gets the creation_date of this PortainerStack.  # noqa: E501

        The date in unix time when stack was created  # noqa: E501

        :return: The creation_date of this PortainerStack.  # noqa: E501
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this PortainerStack.

        The date in unix time when stack was created  # noqa: E501

        :param creation_date: The creation_date of this PortainerStack.  # noqa: E501
        :type: int
        """

        self._creation_date = creation_date

    @property
    def git_config(self):
        """Gets the git_config of this PortainerStack.  # noqa: E501

        The git config of this stack  # noqa: E501

        :return: The git_config of this PortainerStack.  # noqa: E501
        :rtype: GittypesRepoConfig
        """
        return self._git_config

    @git_config.setter
    def git_config(self, git_config):
        """Sets the git_config of this PortainerStack.

        The git config of this stack  # noqa: E501

        :param git_config: The git_config of this PortainerStack.  # noqa: E501
        :type: GittypesRepoConfig
        """

        self._git_config = git_config

    @property
    def is_compose_format(self):
        """Gets the is_compose_format of this PortainerStack.  # noqa: E501

        IsComposeFormat indicates if the Kubernetes stack is created from a Docker Compose file  # noqa: E501

        :return: The is_compose_format of this PortainerStack.  # noqa: E501
        :rtype: bool
        """
        return self._is_compose_format

    @is_compose_format.setter
    def is_compose_format(self, is_compose_format):
        """Sets the is_compose_format of this PortainerStack.

        IsComposeFormat indicates if the Kubernetes stack is created from a Docker Compose file  # noqa: E501

        :param is_compose_format: The is_compose_format of this PortainerStack.  # noqa: E501
        :type: bool
        """

        self._is_compose_format = is_compose_format

    @property
    def namespace(self):
        """Gets the namespace of this PortainerStack.  # noqa: E501

        Kubernetes namespace if stack is a kube application  # noqa: E501

        :return: The namespace of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this PortainerStack.

        Kubernetes namespace if stack is a kube application  # noqa: E501

        :param namespace: The namespace of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def project_path(self):
        """Gets the project_path of this PortainerStack.  # noqa: E501

        Path on disk to the repository hosting the Stack file  # noqa: E501

        :return: The project_path of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._project_path

    @project_path.setter
    def project_path(self, project_path):
        """Sets the project_path of this PortainerStack.

        Path on disk to the repository hosting the Stack file  # noqa: E501

        :param project_path: The project_path of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._project_path = project_path

    @property
    def update_date(self):
        """Gets the update_date of this PortainerStack.  # noqa: E501

        The date in unix time when stack was last updated  # noqa: E501

        :return: The update_date of this PortainerStack.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this PortainerStack.

        The date in unix time when stack was last updated  # noqa: E501

        :param update_date: The update_date of this PortainerStack.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def updated_by(self):
        """Gets the updated_by of this PortainerStack.  # noqa: E501

        The username which last updated this stack  # noqa: E501

        :return: The updated_by of this PortainerStack.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this PortainerStack.

        The username which last updated this stack  # noqa: E501

        :param updated_by: The updated_by of this PortainerStack.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerStack, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerStack):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerStack):
            return True

        return self.to_dict() != other.to_dict()
