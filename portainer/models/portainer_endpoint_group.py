# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class PortainerEndpointGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorized_teams': 'list[int]',
        'authorized_users': 'list[int]',
        'description': 'str',
        'id': 'int',
        'labels': 'list[PortainerPair]',
        'name': 'str',
        'tag_ids': 'list[int]',
        'tags': 'list[str]',
        'team_access_policies': 'PortainerTeamAccessPolicies',
        'user_access_policies': 'PortainerUserAccessPolicies'
    }

    attribute_map = {
        'authorized_teams': 'AuthorizedTeams',
        'authorized_users': 'AuthorizedUsers',
        'description': 'Description',
        'id': 'Id',
        'labels': 'Labels',
        'name': 'Name',
        'tag_ids': 'TagIds',
        'tags': 'Tags',
        'team_access_policies': 'TeamAccessPolicies',
        'user_access_policies': 'UserAccessPolicies'
    }

    def __init__(self, authorized_teams=None, authorized_users=None, description=None, id=None, labels=None, name=None, tag_ids=None, tags=None, team_access_policies=None, user_access_policies=None, _configuration=None):  # noqa: E501
        """PortainerEndpointGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authorized_teams = None
        self._authorized_users = None
        self._description = None
        self._id = None
        self._labels = None
        self._name = None
        self._tag_ids = None
        self._tags = None
        self._team_access_policies = None
        self._user_access_policies = None
        self.discriminator = None

        if authorized_teams is not None:
            self.authorized_teams = authorized_teams
        if authorized_users is not None:
            self.authorized_users = authorized_users
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if labels is not None:
            self.labels = labels
        if name is not None:
            self.name = name
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if tags is not None:
            self.tags = tags
        if team_access_policies is not None:
            self.team_access_policies = team_access_policies
        if user_access_policies is not None:
            self.user_access_policies = user_access_policies

    @property
    def authorized_teams(self):
        """Gets the authorized_teams of this PortainerEndpointGroup.  # noqa: E501


        :return: The authorized_teams of this PortainerEndpointGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._authorized_teams

    @authorized_teams.setter
    def authorized_teams(self, authorized_teams):
        """Sets the authorized_teams of this PortainerEndpointGroup.


        :param authorized_teams: The authorized_teams of this PortainerEndpointGroup.  # noqa: E501
        :type: list[int]
        """

        self._authorized_teams = authorized_teams

    @property
    def authorized_users(self):
        """Gets the authorized_users of this PortainerEndpointGroup.  # noqa: E501

        Deprecated in DBVersion == 18  # noqa: E501

        :return: The authorized_users of this PortainerEndpointGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._authorized_users

    @authorized_users.setter
    def authorized_users(self, authorized_users):
        """Sets the authorized_users of this PortainerEndpointGroup.

        Deprecated in DBVersion == 18  # noqa: E501

        :param authorized_users: The authorized_users of this PortainerEndpointGroup.  # noqa: E501
        :type: list[int]
        """

        self._authorized_users = authorized_users

    @property
    def description(self):
        """Gets the description of this PortainerEndpointGroup.  # noqa: E501

        Description associated to the environment(endpoint) group  # noqa: E501

        :return: The description of this PortainerEndpointGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PortainerEndpointGroup.

        Description associated to the environment(endpoint) group  # noqa: E501

        :param description: The description of this PortainerEndpointGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this PortainerEndpointGroup.  # noqa: E501

        Environment(Endpoint) group Identifier  # noqa: E501

        :return: The id of this PortainerEndpointGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortainerEndpointGroup.

        Environment(Endpoint) group Identifier  # noqa: E501

        :param id: The id of this PortainerEndpointGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this PortainerEndpointGroup.  # noqa: E501

        Deprecated fields  # noqa: E501

        :return: The labels of this PortainerEndpointGroup.  # noqa: E501
        :rtype: list[PortainerPair]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PortainerEndpointGroup.

        Deprecated fields  # noqa: E501

        :param labels: The labels of this PortainerEndpointGroup.  # noqa: E501
        :type: list[PortainerPair]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this PortainerEndpointGroup.  # noqa: E501

        Environment(Endpoint) group name  # noqa: E501

        :return: The name of this PortainerEndpointGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortainerEndpointGroup.

        Environment(Endpoint) group name  # noqa: E501

        :param name: The name of this PortainerEndpointGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tag_ids(self):
        """Gets the tag_ids of this PortainerEndpointGroup.  # noqa: E501

        List of tags associated to this environment(endpoint) group  # noqa: E501

        :return: The tag_ids of this PortainerEndpointGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this PortainerEndpointGroup.

        List of tags associated to this environment(endpoint) group  # noqa: E501

        :param tag_ids: The tag_ids of this PortainerEndpointGroup.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def tags(self):
        """Gets the tags of this PortainerEndpointGroup.  # noqa: E501

        Deprecated in DBVersion == 22  # noqa: E501

        :return: The tags of this PortainerEndpointGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PortainerEndpointGroup.

        Deprecated in DBVersion == 22  # noqa: E501

        :param tags: The tags of this PortainerEndpointGroup.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def team_access_policies(self):
        """Gets the team_access_policies of this PortainerEndpointGroup.  # noqa: E501


        :return: The team_access_policies of this PortainerEndpointGroup.  # noqa: E501
        :rtype: PortainerTeamAccessPolicies
        """
        return self._team_access_policies

    @team_access_policies.setter
    def team_access_policies(self, team_access_policies):
        """Sets the team_access_policies of this PortainerEndpointGroup.


        :param team_access_policies: The team_access_policies of this PortainerEndpointGroup.  # noqa: E501
        :type: PortainerTeamAccessPolicies
        """

        self._team_access_policies = team_access_policies

    @property
    def user_access_policies(self):
        """Gets the user_access_policies of this PortainerEndpointGroup.  # noqa: E501


        :return: The user_access_policies of this PortainerEndpointGroup.  # noqa: E501
        :rtype: PortainerUserAccessPolicies
        """
        return self._user_access_policies

    @user_access_policies.setter
    def user_access_policies(self, user_access_policies):
        """Sets the user_access_policies of this PortainerEndpointGroup.


        :param user_access_policies: The user_access_policies of this PortainerEndpointGroup.  # noqa: E501
        :type: PortainerUserAccessPolicies
        """

        self._user_access_policies = user_access_policies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerEndpointGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerEndpointGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerEndpointGroup):
            return True

        return self.to_dict() != other.to_dict()
