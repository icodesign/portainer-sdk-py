# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class PortainerRegistry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_token': 'str',
        'access_token_expiry': 'int',
        'authentication': 'bool',
        'authorized_teams': 'list[int]',
        'authorized_users': 'list[int]',
        'base_url': 'str',
        'ecr': 'PortainerEcrData',
        'gitlab': 'PortainerGitlabRegistryData',
        'id': 'int',
        'management_configuration': 'PortainerRegistryManagementConfiguration',
        'name': 'str',
        'password': 'str',
        'quay': 'PortainerQuayRegistryData',
        'registry_accesses': 'PortainerRegistryAccesses',
        'team_access_policies': 'PortainerTeamAccessPolicies',
        'type': 'int',
        'url': 'str',
        'user_access_policies': 'PortainerUserAccessPolicies',
        'username': 'str'
    }

    attribute_map = {
        'access_token': 'AccessToken',
        'access_token_expiry': 'AccessTokenExpiry',
        'authentication': 'Authentication',
        'authorized_teams': 'AuthorizedTeams',
        'authorized_users': 'AuthorizedUsers',
        'base_url': 'BaseURL',
        'ecr': 'Ecr',
        'gitlab': 'Gitlab',
        'id': 'Id',
        'management_configuration': 'ManagementConfiguration',
        'name': 'Name',
        'password': 'Password',
        'quay': 'Quay',
        'registry_accesses': 'RegistryAccesses',
        'team_access_policies': 'TeamAccessPolicies',
        'type': 'Type',
        'url': 'URL',
        'user_access_policies': 'UserAccessPolicies',
        'username': 'Username'
    }

    def __init__(self, access_token=None, access_token_expiry=None, authentication=None, authorized_teams=None, authorized_users=None, base_url=None, ecr=None, gitlab=None, id=None, management_configuration=None, name=None, password=None, quay=None, registry_accesses=None, team_access_policies=None, type=None, url=None, user_access_policies=None, username=None, _configuration=None):  # noqa: E501
        """PortainerRegistry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._access_token = None
        self._access_token_expiry = None
        self._authentication = None
        self._authorized_teams = None
        self._authorized_users = None
        self._base_url = None
        self._ecr = None
        self._gitlab = None
        self._id = None
        self._management_configuration = None
        self._name = None
        self._password = None
        self._quay = None
        self._registry_accesses = None
        self._team_access_policies = None
        self._type = None
        self._url = None
        self._user_access_policies = None
        self._username = None
        self.discriminator = None

        if access_token is not None:
            self.access_token = access_token
        if access_token_expiry is not None:
            self.access_token_expiry = access_token_expiry
        if authentication is not None:
            self.authentication = authentication
        if authorized_teams is not None:
            self.authorized_teams = authorized_teams
        if authorized_users is not None:
            self.authorized_users = authorized_users
        if base_url is not None:
            self.base_url = base_url
        if ecr is not None:
            self.ecr = ecr
        if gitlab is not None:
            self.gitlab = gitlab
        if id is not None:
            self.id = id
        if management_configuration is not None:
            self.management_configuration = management_configuration
        if name is not None:
            self.name = name
        if password is not None:
            self.password = password
        if quay is not None:
            self.quay = quay
        if registry_accesses is not None:
            self.registry_accesses = registry_accesses
        if team_access_policies is not None:
            self.team_access_policies = team_access_policies
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if user_access_policies is not None:
            self.user_access_policies = user_access_policies
        if username is not None:
            self.username = username

    @property
    def access_token(self):
        """Gets the access_token of this PortainerRegistry.  # noqa: E501

        Stores temporary access token  # noqa: E501

        :return: The access_token of this PortainerRegistry.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this PortainerRegistry.

        Stores temporary access token  # noqa: E501

        :param access_token: The access_token of this PortainerRegistry.  # noqa: E501
        :type: str
        """

        self._access_token = access_token

    @property
    def access_token_expiry(self):
        """Gets the access_token_expiry of this PortainerRegistry.  # noqa: E501


        :return: The access_token_expiry of this PortainerRegistry.  # noqa: E501
        :rtype: int
        """
        return self._access_token_expiry

    @access_token_expiry.setter
    def access_token_expiry(self, access_token_expiry):
        """Sets the access_token_expiry of this PortainerRegistry.


        :param access_token_expiry: The access_token_expiry of this PortainerRegistry.  # noqa: E501
        :type: int
        """

        self._access_token_expiry = access_token_expiry

    @property
    def authentication(self):
        """Gets the authentication of this PortainerRegistry.  # noqa: E501

        Is authentication against this registry enabled  # noqa: E501

        :return: The authentication of this PortainerRegistry.  # noqa: E501
        :rtype: bool
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this PortainerRegistry.

        Is authentication against this registry enabled  # noqa: E501

        :param authentication: The authentication of this PortainerRegistry.  # noqa: E501
        :type: bool
        """

        self._authentication = authentication

    @property
    def authorized_teams(self):
        """Gets the authorized_teams of this PortainerRegistry.  # noqa: E501

        Deprecated in DBVersion == 18  # noqa: E501

        :return: The authorized_teams of this PortainerRegistry.  # noqa: E501
        :rtype: list[int]
        """
        return self._authorized_teams

    @authorized_teams.setter
    def authorized_teams(self, authorized_teams):
        """Sets the authorized_teams of this PortainerRegistry.

        Deprecated in DBVersion == 18  # noqa: E501

        :param authorized_teams: The authorized_teams of this PortainerRegistry.  # noqa: E501
        :type: list[int]
        """

        self._authorized_teams = authorized_teams

    @property
    def authorized_users(self):
        """Gets the authorized_users of this PortainerRegistry.  # noqa: E501

        Deprecated in DBVersion == 18  # noqa: E501

        :return: The authorized_users of this PortainerRegistry.  # noqa: E501
        :rtype: list[int]
        """
        return self._authorized_users

    @authorized_users.setter
    def authorized_users(self, authorized_users):
        """Sets the authorized_users of this PortainerRegistry.

        Deprecated in DBVersion == 18  # noqa: E501

        :param authorized_users: The authorized_users of this PortainerRegistry.  # noqa: E501
        :type: list[int]
        """

        self._authorized_users = authorized_users

    @property
    def base_url(self):
        """Gets the base_url of this PortainerRegistry.  # noqa: E501

        Base URL, introduced for ProGet registry  # noqa: E501

        :return: The base_url of this PortainerRegistry.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this PortainerRegistry.

        Base URL, introduced for ProGet registry  # noqa: E501

        :param base_url: The base_url of this PortainerRegistry.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def ecr(self):
        """Gets the ecr of this PortainerRegistry.  # noqa: E501


        :return: The ecr of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerEcrData
        """
        return self._ecr

    @ecr.setter
    def ecr(self, ecr):
        """Sets the ecr of this PortainerRegistry.


        :param ecr: The ecr of this PortainerRegistry.  # noqa: E501
        :type: PortainerEcrData
        """

        self._ecr = ecr

    @property
    def gitlab(self):
        """Gets the gitlab of this PortainerRegistry.  # noqa: E501


        :return: The gitlab of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerGitlabRegistryData
        """
        return self._gitlab

    @gitlab.setter
    def gitlab(self, gitlab):
        """Sets the gitlab of this PortainerRegistry.


        :param gitlab: The gitlab of this PortainerRegistry.  # noqa: E501
        :type: PortainerGitlabRegistryData
        """

        self._gitlab = gitlab

    @property
    def id(self):
        """Gets the id of this PortainerRegistry.  # noqa: E501

        Registry Identifier  # noqa: E501

        :return: The id of this PortainerRegistry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PortainerRegistry.

        Registry Identifier  # noqa: E501

        :param id: The id of this PortainerRegistry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def management_configuration(self):
        """Gets the management_configuration of this PortainerRegistry.  # noqa: E501


        :return: The management_configuration of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerRegistryManagementConfiguration
        """
        return self._management_configuration

    @management_configuration.setter
    def management_configuration(self, management_configuration):
        """Sets the management_configuration of this PortainerRegistry.


        :param management_configuration: The management_configuration of this PortainerRegistry.  # noqa: E501
        :type: PortainerRegistryManagementConfiguration
        """

        self._management_configuration = management_configuration

    @property
    def name(self):
        """Gets the name of this PortainerRegistry.  # noqa: E501

        Registry Name  # noqa: E501

        :return: The name of this PortainerRegistry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PortainerRegistry.

        Registry Name  # noqa: E501

        :param name: The name of this PortainerRegistry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def password(self):
        """Gets the password of this PortainerRegistry.  # noqa: E501

        Password or SecretAccessKey used to authenticate against this registry  # noqa: E501

        :return: The password of this PortainerRegistry.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PortainerRegistry.

        Password or SecretAccessKey used to authenticate against this registry  # noqa: E501

        :param password: The password of this PortainerRegistry.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def quay(self):
        """Gets the quay of this PortainerRegistry.  # noqa: E501


        :return: The quay of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerQuayRegistryData
        """
        return self._quay

    @quay.setter
    def quay(self, quay):
        """Sets the quay of this PortainerRegistry.


        :param quay: The quay of this PortainerRegistry.  # noqa: E501
        :type: PortainerQuayRegistryData
        """

        self._quay = quay

    @property
    def registry_accesses(self):
        """Gets the registry_accesses of this PortainerRegistry.  # noqa: E501


        :return: The registry_accesses of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerRegistryAccesses
        """
        return self._registry_accesses

    @registry_accesses.setter
    def registry_accesses(self, registry_accesses):
        """Sets the registry_accesses of this PortainerRegistry.


        :param registry_accesses: The registry_accesses of this PortainerRegistry.  # noqa: E501
        :type: PortainerRegistryAccesses
        """

        self._registry_accesses = registry_accesses

    @property
    def team_access_policies(self):
        """Gets the team_access_policies of this PortainerRegistry.  # noqa: E501

        Deprecated in DBVersion == 31  # noqa: E501

        :return: The team_access_policies of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerTeamAccessPolicies
        """
        return self._team_access_policies

    @team_access_policies.setter
    def team_access_policies(self, team_access_policies):
        """Sets the team_access_policies of this PortainerRegistry.

        Deprecated in DBVersion == 31  # noqa: E501

        :param team_access_policies: The team_access_policies of this PortainerRegistry.  # noqa: E501
        :type: PortainerTeamAccessPolicies
        """

        self._team_access_policies = team_access_policies

    @property
    def type(self):
        """Gets the type of this PortainerRegistry.  # noqa: E501

        Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)  # noqa: E501

        :return: The type of this PortainerRegistry.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PortainerRegistry.

        Registry Type (1 - Quay, 2 - Azure, 3 - Custom, 4 - Gitlab, 5 - ProGet, 6 - DockerHub, 7 - ECR)  # noqa: E501

        :param type: The type of this PortainerRegistry.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this PortainerRegistry.  # noqa: E501

        URL or IP address of the Docker registry  # noqa: E501

        :return: The url of this PortainerRegistry.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this PortainerRegistry.

        URL or IP address of the Docker registry  # noqa: E501

        :param url: The url of this PortainerRegistry.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def user_access_policies(self):
        """Gets the user_access_policies of this PortainerRegistry.  # noqa: E501

        Deprecated fields Deprecated in DBVersion == 31  # noqa: E501

        :return: The user_access_policies of this PortainerRegistry.  # noqa: E501
        :rtype: PortainerUserAccessPolicies
        """
        return self._user_access_policies

    @user_access_policies.setter
    def user_access_policies(self, user_access_policies):
        """Sets the user_access_policies of this PortainerRegistry.

        Deprecated fields Deprecated in DBVersion == 31  # noqa: E501

        :param user_access_policies: The user_access_policies of this PortainerRegistry.  # noqa: E501
        :type: PortainerUserAccessPolicies
        """

        self._user_access_policies = user_access_policies

    @property
    def username(self):
        """Gets the username of this PortainerRegistry.  # noqa: E501

        Username or AccessKeyID used to authenticate against this registry  # noqa: E501

        :return: The username of this PortainerRegistry.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PortainerRegistry.

        Username or AccessKeyID used to authenticate against this registry  # noqa: E501

        :param username: The username of this PortainerRegistry.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerRegistry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerRegistry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerRegistry):
            return True

        return self.to_dict() != other.to_dict()
