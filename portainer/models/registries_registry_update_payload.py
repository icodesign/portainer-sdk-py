# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class RegistriesRegistryUpdatePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication': 'bool',
        'base_url': 'str',
        'ecr': 'PortainerEcrData',
        'name': 'str',
        'password': 'str',
        'quay': 'PortainerQuayRegistryData',
        'registry_accesses': 'PortainerRegistryAccesses',
        'url': 'str',
        'username': 'str'
    }

    attribute_map = {
        'authentication': 'authentication',
        'base_url': 'baseURL',
        'ecr': 'ecr',
        'name': 'name',
        'password': 'password',
        'quay': 'quay',
        'registry_accesses': 'registryAccesses',
        'url': 'url',
        'username': 'username'
    }

    def __init__(self, authentication=None, base_url=None, ecr=None, name=None, password=None, quay=None, registry_accesses=None, url=None, username=None, _configuration=None):  # noqa: E501
        """RegistriesRegistryUpdatePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authentication = None
        self._base_url = None
        self._ecr = None
        self._name = None
        self._password = None
        self._quay = None
        self._registry_accesses = None
        self._url = None
        self._username = None
        self.discriminator = None

        self.authentication = authentication
        if base_url is not None:
            self.base_url = base_url
        if ecr is not None:
            self.ecr = ecr
        self.name = name
        if password is not None:
            self.password = password
        if quay is not None:
            self.quay = quay
        if registry_accesses is not None:
            self.registry_accesses = registry_accesses
        self.url = url
        if username is not None:
            self.username = username

    @property
    def authentication(self):
        """Gets the authentication of this RegistriesRegistryUpdatePayload.  # noqa: E501

        Is authentication against this registry enabled  # noqa: E501

        :return: The authentication of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: bool
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this RegistriesRegistryUpdatePayload.

        Is authentication against this registry enabled  # noqa: E501

        :param authentication: The authentication of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def base_url(self):
        """Gets the base_url of this RegistriesRegistryUpdatePayload.  # noqa: E501

        BaseURL is used for quay registry  # noqa: E501

        :return: The base_url of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this RegistriesRegistryUpdatePayload.

        BaseURL is used for quay registry  # noqa: E501

        :param base_url: The base_url of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: str
        """

        self._base_url = base_url

    @property
    def ecr(self):
        """Gets the ecr of this RegistriesRegistryUpdatePayload.  # noqa: E501

        ECR data  # noqa: E501

        :return: The ecr of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: PortainerEcrData
        """
        return self._ecr

    @ecr.setter
    def ecr(self, ecr):
        """Sets the ecr of this RegistriesRegistryUpdatePayload.

        ECR data  # noqa: E501

        :param ecr: The ecr of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: PortainerEcrData
        """

        self._ecr = ecr

    @property
    def name(self):
        """Gets the name of this RegistriesRegistryUpdatePayload.  # noqa: E501

        Name that will be used to identify this registry  # noqa: E501

        :return: The name of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RegistriesRegistryUpdatePayload.

        Name that will be used to identify this registry  # noqa: E501

        :param name: The name of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def password(self):
        """Gets the password of this RegistriesRegistryUpdatePayload.  # noqa: E501

        Password used to authenticate against this registry. required when Authentication is true  # noqa: E501

        :return: The password of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistriesRegistryUpdatePayload.

        Password used to authenticate against this registry. required when Authentication is true  # noqa: E501

        :param password: The password of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def quay(self):
        """Gets the quay of this RegistriesRegistryUpdatePayload.  # noqa: E501

        Quay data  # noqa: E501

        :return: The quay of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: PortainerQuayRegistryData
        """
        return self._quay

    @quay.setter
    def quay(self, quay):
        """Sets the quay of this RegistriesRegistryUpdatePayload.

        Quay data  # noqa: E501

        :param quay: The quay of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: PortainerQuayRegistryData
        """

        self._quay = quay

    @property
    def registry_accesses(self):
        """Gets the registry_accesses of this RegistriesRegistryUpdatePayload.  # noqa: E501

        Registry access control  # noqa: E501

        :return: The registry_accesses of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: PortainerRegistryAccesses
        """
        return self._registry_accesses

    @registry_accesses.setter
    def registry_accesses(self, registry_accesses):
        """Sets the registry_accesses of this RegistriesRegistryUpdatePayload.

        Registry access control  # noqa: E501

        :param registry_accesses: The registry_accesses of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: PortainerRegistryAccesses
        """

        self._registry_accesses = registry_accesses

    @property
    def url(self):
        """Gets the url of this RegistriesRegistryUpdatePayload.  # noqa: E501

        URL or IP address of the Docker registry  # noqa: E501

        :return: The url of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this RegistriesRegistryUpdatePayload.

        URL or IP address of the Docker registry  # noqa: E501

        :param url: The url of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def username(self):
        """Gets the username of this RegistriesRegistryUpdatePayload.  # noqa: E501

        Username used to authenticate against this registry. Required when Authentication is true  # noqa: E501

        :return: The username of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RegistriesRegistryUpdatePayload.

        Username used to authenticate against this registry. Required when Authentication is true  # noqa: E501

        :param username: The username of this RegistriesRegistryUpdatePayload.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistriesRegistryUpdatePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistriesRegistryUpdatePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistriesRegistryUpdatePayload):
            return True

        return self.to_dict() != other.to_dict()
