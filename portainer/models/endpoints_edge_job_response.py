# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class EndpointsEdgeJobResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collect_logs': 'bool',
        'cron_expression': 'str',
        'id': 'int',
        'script': 'str',
        'version': 'int'
    }

    attribute_map = {
        'collect_logs': 'CollectLogs',
        'cron_expression': 'CronExpression',
        'id': 'Id',
        'script': 'Script',
        'version': 'Version'
    }

    def __init__(self, collect_logs=None, cron_expression=None, id=None, script=None, version=None, _configuration=None):  # noqa: E501
        """EndpointsEdgeJobResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collect_logs = None
        self._cron_expression = None
        self._id = None
        self._script = None
        self._version = None
        self.discriminator = None

        if collect_logs is not None:
            self.collect_logs = collect_logs
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if id is not None:
            self.id = id
        if script is not None:
            self.script = script
        if version is not None:
            self.version = version

    @property
    def collect_logs(self):
        """Gets the collect_logs of this EndpointsEdgeJobResponse.  # noqa: E501

        Whether to collect logs  # noqa: E501

        :return: The collect_logs of this EndpointsEdgeJobResponse.  # noqa: E501
        :rtype: bool
        """
        return self._collect_logs

    @collect_logs.setter
    def collect_logs(self, collect_logs):
        """Sets the collect_logs of this EndpointsEdgeJobResponse.

        Whether to collect logs  # noqa: E501

        :param collect_logs: The collect_logs of this EndpointsEdgeJobResponse.  # noqa: E501
        :type: bool
        """

        self._collect_logs = collect_logs

    @property
    def cron_expression(self):
        """Gets the cron_expression of this EndpointsEdgeJobResponse.  # noqa: E501

        A cron expression to schedule this job  # noqa: E501

        :return: The cron_expression of this EndpointsEdgeJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this EndpointsEdgeJobResponse.

        A cron expression to schedule this job  # noqa: E501

        :param cron_expression: The cron_expression of this EndpointsEdgeJobResponse.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def id(self):
        """Gets the id of this EndpointsEdgeJobResponse.  # noqa: E501

        EdgeJob Identifier  # noqa: E501

        :return: The id of this EndpointsEdgeJobResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EndpointsEdgeJobResponse.

        EdgeJob Identifier  # noqa: E501

        :param id: The id of this EndpointsEdgeJobResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def script(self):
        """Gets the script of this EndpointsEdgeJobResponse.  # noqa: E501

        Script to run  # noqa: E501

        :return: The script of this EndpointsEdgeJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this EndpointsEdgeJobResponse.

        Script to run  # noqa: E501

        :param script: The script of this EndpointsEdgeJobResponse.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def version(self):
        """Gets the version of this EndpointsEdgeJobResponse.  # noqa: E501

        Version of this EdgeJob  # noqa: E501

        :return: The version of this EndpointsEdgeJobResponse.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EndpointsEdgeJobResponse.

        Version of this EdgeJob  # noqa: E501

        :param version: The version of this EndpointsEdgeJobResponse.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndpointsEdgeJobResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndpointsEdgeJobResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EndpointsEdgeJobResponse):
            return True

        return self.to_dict() != other.to_dict()
