# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class RegistriesRegistryConfigurePayload(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication': 'bool',
        'password': 'str',
        'region': 'str',
        'tls': 'bool',
        'tlscacert_file': 'list[int]',
        'tlscert_file': 'list[int]',
        'tlskey_file': 'list[int]',
        'tlsskip_verify': 'bool',
        'username': 'str'
    }

    attribute_map = {
        'authentication': 'authentication',
        'password': 'password',
        'region': 'region',
        'tls': 'tls',
        'tlscacert_file': 'tlscacertFile',
        'tlscert_file': 'tlscertFile',
        'tlskey_file': 'tlskeyFile',
        'tlsskip_verify': 'tlsskipVerify',
        'username': 'username'
    }

    def __init__(self, authentication=None, password=None, region=None, tls=None, tlscacert_file=None, tlscert_file=None, tlskey_file=None, tlsskip_verify=None, username=None, _configuration=None):  # noqa: E501
        """RegistriesRegistryConfigurePayload - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authentication = None
        self._password = None
        self._region = None
        self._tls = None
        self._tlscacert_file = None
        self._tlscert_file = None
        self._tlskey_file = None
        self._tlsskip_verify = None
        self._username = None
        self.discriminator = None

        self.authentication = authentication
        if password is not None:
            self.password = password
        if region is not None:
            self.region = region
        if tls is not None:
            self.tls = tls
        if tlscacert_file is not None:
            self.tlscacert_file = tlscacert_file
        if tlscert_file is not None:
            self.tlscert_file = tlscert_file
        if tlskey_file is not None:
            self.tlskey_file = tlskey_file
        if tlsskip_verify is not None:
            self.tlsskip_verify = tlsskip_verify
        if username is not None:
            self.username = username

    @property
    def authentication(self):
        """Gets the authentication of this RegistriesRegistryConfigurePayload.  # noqa: E501

        Is authentication against this registry enabled  # noqa: E501

        :return: The authentication of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: bool
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this RegistriesRegistryConfigurePayload.

        Is authentication against this registry enabled  # noqa: E501

        :param authentication: The authentication of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def password(self):
        """Gets the password of this RegistriesRegistryConfigurePayload.  # noqa: E501

        Password used to authenticate against this registry. required when Authentication is true  # noqa: E501

        :return: The password of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this RegistriesRegistryConfigurePayload.

        Password used to authenticate against this registry. required when Authentication is true  # noqa: E501

        :param password: The password of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def region(self):
        """Gets the region of this RegistriesRegistryConfigurePayload.  # noqa: E501

        ECR region  # noqa: E501

        :return: The region of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RegistriesRegistryConfigurePayload.

        ECR region  # noqa: E501

        :param region: The region of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def tls(self):
        """Gets the tls of this RegistriesRegistryConfigurePayload.  # noqa: E501

        Use TLS  # noqa: E501

        :return: The tls of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: bool
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this RegistriesRegistryConfigurePayload.

        Use TLS  # noqa: E501

        :param tls: The tls of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: bool
        """

        self._tls = tls

    @property
    def tlscacert_file(self):
        """Gets the tlscacert_file of this RegistriesRegistryConfigurePayload.  # noqa: E501

        The TLS CA certificate file  # noqa: E501

        :return: The tlscacert_file of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._tlscacert_file

    @tlscacert_file.setter
    def tlscacert_file(self, tlscacert_file):
        """Sets the tlscacert_file of this RegistriesRegistryConfigurePayload.

        The TLS CA certificate file  # noqa: E501

        :param tlscacert_file: The tlscacert_file of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: list[int]
        """

        self._tlscacert_file = tlscacert_file

    @property
    def tlscert_file(self):
        """Gets the tlscert_file of this RegistriesRegistryConfigurePayload.  # noqa: E501

        The TLS client certificate file  # noqa: E501

        :return: The tlscert_file of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._tlscert_file

    @tlscert_file.setter
    def tlscert_file(self, tlscert_file):
        """Sets the tlscert_file of this RegistriesRegistryConfigurePayload.

        The TLS client certificate file  # noqa: E501

        :param tlscert_file: The tlscert_file of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: list[int]
        """

        self._tlscert_file = tlscert_file

    @property
    def tlskey_file(self):
        """Gets the tlskey_file of this RegistriesRegistryConfigurePayload.  # noqa: E501

        The TLS client key file  # noqa: E501

        :return: The tlskey_file of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: list[int]
        """
        return self._tlskey_file

    @tlskey_file.setter
    def tlskey_file(self, tlskey_file):
        """Sets the tlskey_file of this RegistriesRegistryConfigurePayload.

        The TLS client key file  # noqa: E501

        :param tlskey_file: The tlskey_file of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: list[int]
        """

        self._tlskey_file = tlskey_file

    @property
    def tlsskip_verify(self):
        """Gets the tlsskip_verify of this RegistriesRegistryConfigurePayload.  # noqa: E501

        Skip the verification of the server TLS certificate  # noqa: E501

        :return: The tlsskip_verify of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: bool
        """
        return self._tlsskip_verify

    @tlsskip_verify.setter
    def tlsskip_verify(self, tlsskip_verify):
        """Sets the tlsskip_verify of this RegistriesRegistryConfigurePayload.

        Skip the verification of the server TLS certificate  # noqa: E501

        :param tlsskip_verify: The tlsskip_verify of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: bool
        """

        self._tlsskip_verify = tlsskip_verify

    @property
    def username(self):
        """Gets the username of this RegistriesRegistryConfigurePayload.  # noqa: E501

        Username used to authenticate against this registry. Required when Authentication is true  # noqa: E501

        :return: The username of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RegistriesRegistryConfigurePayload.

        Username used to authenticate against this registry. Required when Authentication is true  # noqa: E501

        :param username: The username of this RegistriesRegistryConfigurePayload.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RegistriesRegistryConfigurePayload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RegistriesRegistryConfigurePayload):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RegistriesRegistryConfigurePayload):
            return True

        return self.to_dict() != other.to_dict()
