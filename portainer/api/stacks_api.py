# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from portainer.api_client import ApiClient


class StacksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def stack_associate(self, id, endpoint_id, swarm_id, orphaned_running, **kwargs):  # noqa: E501
        """Associate an orphaned stack to a new environment(endpoint)  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_associate(id, endpoint_id, swarm_id, orphaned_running, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack. (required)
        :param int swarm_id: Swarm identifier (required)
        :param bool orphaned_running: Indicates whether the stack is orphaned (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_associate_with_http_info(id, endpoint_id, swarm_id, orphaned_running, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_associate_with_http_info(id, endpoint_id, swarm_id, orphaned_running, **kwargs)  # noqa: E501
            return data

    def stack_associate_with_http_info(self, id, endpoint_id, swarm_id, orphaned_running, **kwargs):  # noqa: E501
        """Associate an orphaned stack to a new environment(endpoint)  # noqa: E501

        **Access policy**: administrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_associate_with_http_info(id, endpoint_id, swarm_id, orphaned_running, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack. (required)
        :param int swarm_id: Swarm identifier (required)
        :param bool orphaned_running: Indicates whether the stack is orphaned (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'endpoint_id', 'swarm_id', 'orphaned_running']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_associate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_associate`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `stack_associate`")  # noqa: E501
        # verify the required parameter 'swarm_id' is set
        if self.api_client.client_side_validation and ('swarm_id' not in params or
                                                       params['swarm_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `swarm_id` when calling `stack_associate`")  # noqa: E501
        # verify the required parameter 'orphaned_running' is set
        if self.api_client.client_side_validation and ('orphaned_running' not in params or
                                                       params['orphaned_running'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `orphaned_running` when calling `stack_associate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501
        if 'swarm_id' in params:
            query_params.append(('swarmId', params['swarm_id']))  # noqa: E501
        if 'orphaned_running' in params:
            query_params.append(('orphanedRunning', params['orphaned_running']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/associate', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_create(self, type, method, endpoint_id, **kwargs):  # noqa: E501
        """Deploy a new stack  # noqa: E501

        Deploy a new stack into a Docker environment(endpoint) specified via the environment(endpoint) identifier. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_create(type, method, endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: Stack deployment type. Possible values: 1 (Swarm stack) or 2 (Compose stack). (required)
        :param str method: Stack deployment method. Possible values: file, string or repository. (required)
        :param int endpoint_id: Identifier of the environment(endpoint) that will be used to deploy the stack (required)
        :param StacksSwarmStackFromFileContentPayload body_swarm_string: Required when using method=string and type=1
        :param StacksSwarmStackFromGitRepositoryPayload body_swarm_repository: Required when using method=repository and type=1
        :param StacksComposeStackFromFileContentPayload body_compose_string: Required when using method=string and type=2
        :param StacksComposeStackFromGitRepositoryPayload body_compose_repository: Required when using method=repository and type=2
        :param str name: Name of the stack. required when method is file
        :param str swarm_id: Swarm cluster identifier. Required when method equals file and type equals 1. required when method is file
        :param str env: Environment(Endpoint) variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. Optional, used when method equals file and type equals 1.
        :param file file: Stack file. required when method is file
        :return: PortainerCustomTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_create_with_http_info(type, method, endpoint_id, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_create_with_http_info(type, method, endpoint_id, **kwargs)  # noqa: E501
            return data

    def stack_create_with_http_info(self, type, method, endpoint_id, **kwargs):  # noqa: E501
        """Deploy a new stack  # noqa: E501

        Deploy a new stack into a Docker environment(endpoint) specified via the environment(endpoint) identifier. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_create_with_http_info(type, method, endpoint_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: Stack deployment type. Possible values: 1 (Swarm stack) or 2 (Compose stack). (required)
        :param str method: Stack deployment method. Possible values: file, string or repository. (required)
        :param int endpoint_id: Identifier of the environment(endpoint) that will be used to deploy the stack (required)
        :param StacksSwarmStackFromFileContentPayload body_swarm_string: Required when using method=string and type=1
        :param StacksSwarmStackFromGitRepositoryPayload body_swarm_repository: Required when using method=repository and type=1
        :param StacksComposeStackFromFileContentPayload body_compose_string: Required when using method=string and type=2
        :param StacksComposeStackFromGitRepositoryPayload body_compose_repository: Required when using method=repository and type=2
        :param str name: Name of the stack. required when method is file
        :param str swarm_id: Swarm cluster identifier. Required when method equals file and type equals 1. required when method is file
        :param str env: Environment(Endpoint) variables passed during deployment, represented as a JSON array [{'name': 'name', 'value': 'value'}]. Optional, used when method equals file and type equals 1.
        :param file file: Stack file. required when method is file
        :return: PortainerCustomTemplate
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'method', 'endpoint_id', 'body_swarm_string', 'body_swarm_repository', 'body_compose_string', 'body_compose_repository', 'name', 'swarm_id', 'env', 'file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'type' is set
        if self.api_client.client_side_validation and ('type' not in params or
                                                       params['type'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `type` when calling `stack_create`")  # noqa: E501
        # verify the required parameter 'method' is set
        if self.api_client.client_side_validation and ('method' not in params or
                                                       params['method'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `method` when calling `stack_create`")  # noqa: E501
        # verify the required parameter 'endpoint_id' is set
        if self.api_client.client_side_validation and ('endpoint_id' not in params or
                                                       params['endpoint_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `endpoint_id` when calling `stack_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'method' in params:
            query_params.append(('method', params['method']))  # noqa: E501
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'swarm_id' in params:
            form_params.append(('SwarmID', params['swarm_id']))  # noqa: E501
        if 'env' in params:
            form_params.append(('Env', params['env']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501

        body_params = None
        if 'body_compose_repository' in params:
            body_params = params['body_compose_repository']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerCustomTemplate',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_delete(self, id, **kwargs):  # noqa: E501
        """Remove a stack  # noqa: E501

        Remove a stack. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_delete(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param bool external: Set to true to delete an external stack. Only external Swarm stacks are supported
        :param int endpoint_id: Environment(Endpoint) identifier used to remove an external stack (required when external is set to true)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_delete_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_delete_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stack_delete_with_http_info(self, id, **kwargs):  # noqa: E501
        """Remove a stack  # noqa: E501

        Remove a stack. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_delete_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param bool external: Set to true to delete an external stack. Only external Swarm stacks are supported
        :param int endpoint_id: Environment(Endpoint) identifier used to remove an external stack (required when external is set to true)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'external', 'endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'external' in params:
            query_params.append(('external', params['external']))  # noqa: E501
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_file_inspect(self, id, **kwargs):  # noqa: E501
        """Retrieve the content of the Stack file for the specified stack  # noqa: E501

        Get Stack file content. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_file_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: StacksStackFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_file_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_file_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stack_file_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the content of the Stack file for the specified stack  # noqa: E501

        Get Stack file content. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_file_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: StacksStackFileResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_file_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_file_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/file', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StacksStackFileResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_git_redeploy(self, id, body, **kwargs):  # noqa: E501
        """Redeploy a stack  # noqa: E501

        Pull and redeploy a stack via Git **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_git_redeploy(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksStackGitRedployPayload body: Git configs for pull and redeploy a stack (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_git_redeploy_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_git_redeploy_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def stack_git_redeploy_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Redeploy a stack  # noqa: E501

        Pull and redeploy a stack via Git **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_git_redeploy_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksStackGitRedployPayload body: Git configs for pull and redeploy a stack (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_git_redeploy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_git_redeploy`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `stack_git_redeploy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/git/redeploy', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_inspect(self, id, **kwargs):  # noqa: E501
        """Inspect a stack  # noqa: E501

        Retrieve details about a stack. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_inspect(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_inspect_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_inspect_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stack_inspect_with_http_info(self, id, **kwargs):  # noqa: E501
        """Inspect a stack  # noqa: E501

        Retrieve details about a stack. **Access policy**: restricted  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_inspect_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_inspect" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_inspect`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_list(self, **kwargs):  # noqa: E501
        """List stacks  # noqa: E501

        List all stacks based on the current user authorizations. Will return all stacks if using an administrator account otherwise it will only return the list of stacks the user have access to. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID.
        :return: list[PortainerStack]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stack_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def stack_list_with_http_info(self, **kwargs):  # noqa: E501
        """List stacks  # noqa: E501

        List all stacks based on the current user authorizations. Will return all stacks if using an administrator account otherwise it will only return the list of stacks the user have access to. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filters: Filters to process on the stack list. Encoded as JSON (a map[string]string). For example, {'SwarmID': 'jpofkc0i9uo9wtx1zesuk649w'} will only return stacks that are part of the specified Swarm cluster. Available filters: EndpointID, SwarmID.
        :return: list[PortainerStack]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PortainerStack]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_migrate(self, id, body, **kwargs):  # noqa: E501
        """Migrate a stack to another environment(endpoint)  # noqa: E501

        Migrate a stack from an environment(endpoint) to another environment(endpoint). It will re-create the stack inside the target environment(endpoint) before removing the original stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_migrate(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksStackMigratePayload body: Stack migration details (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_migrate_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_migrate_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def stack_migrate_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Migrate a stack to another environment(endpoint)  # noqa: E501

        Migrate a stack from an environment(endpoint) to another environment(endpoint). It will re-create the stack inside the target environment(endpoint) before removing the original stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_migrate_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksStackMigratePayload body: Stack migration details (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_migrate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_migrate`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `stack_migrate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/migrate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_start(self, id, **kwargs):  # noqa: E501
        """Starts a stopped Stack  # noqa: E501

        Starts a stopped Stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_start(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_start_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_start_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stack_start_with_http_info(self, id, **kwargs):  # noqa: E501
        """Starts a stopped Stack  # noqa: E501

        Starts a stopped Stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_start_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_start" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_start`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/start', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_stop(self, id, **kwargs):  # noqa: E501
        """Stops a stopped Stack  # noqa: E501

        Stops a stopped Stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_stop(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_stop_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_stop_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def stack_stop_with_http_info(self, id, **kwargs):  # noqa: E501
        """Stops a stopped Stack  # noqa: E501

        Stops a stopped Stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_stop_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_stop" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_stop`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/stop', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_update(self, id, body, **kwargs):  # noqa: E501
        """Update a stack  # noqa: E501

        Update a stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_update(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksUpdateSwarmStackPayload body: Stack details (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_update_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_update_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def stack_update_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update a stack  # noqa: E501

        Update a stack. **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_update_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksUpdateSwarmStackPayload body: Stack details (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `stack_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stack_update_git(self, id, body, **kwargs):  # noqa: E501
        """Update a stack's Git configs  # noqa: E501

        Update the Git settings in a stack, e.g., RepositoryReferenceName and AutoUpdate **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_update_git(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksStackGitUpdatePayload body: Git configs for pull and redeploy a stack (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stack_update_git_with_http_info(id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.stack_update_git_with_http_info(id, body, **kwargs)  # noqa: E501
            return data

    def stack_update_git_with_http_info(self, id, body, **kwargs):  # noqa: E501
        """Update a stack's Git configs  # noqa: E501

        Update the Git settings in a stack, e.g., RepositoryReferenceName and AutoUpdate **Access policy**: authenticated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stack_update_git_with_http_info(id, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: Stack identifier (required)
        :param StacksStackGitUpdatePayload body: Git configs for pull and redeploy a stack (required)
        :param int endpoint_id: Stacks created before version 1.18.0 might not have an associated environment(endpoint) identifier. Use this optional parameter to set the environment(endpoint) identifier used by the stack.
        :return: PortainerStack
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'endpoint_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stack_update_git" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `stack_update_git`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `stack_update_git`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'endpoint_id' in params:
            query_params.append(('endpointId', params['endpoint_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyAuth', 'jwt']  # noqa: E501

        return self.api_client.call_api(
            '/stacks/{id}/git', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PortainerStack',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def webhook_invoke(self, webhook_id, **kwargs):  # noqa: E501
        """Webhook for triggering stack updates from git  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhook_invoke(webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webhook_id: Stack identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.webhook_invoke_with_http_info(webhook_id, **kwargs)  # noqa: E501
        else:
            (data) = self.webhook_invoke_with_http_info(webhook_id, **kwargs)  # noqa: E501
            return data

    def webhook_invoke_with_http_info(self, webhook_id, **kwargs):  # noqa: E501
        """Webhook for triggering stack updates from git  # noqa: E501

        **Access policy**: public  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.webhook_invoke_with_http_info(webhook_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str webhook_id: Stack identifier (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['webhook_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method webhook_invoke" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'webhook_id' is set
        if self.api_client.client_side_validation and ('webhook_id' not in params or
                                                       params['webhook_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `webhook_id` when calling `webhook_invoke`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'webhook_id' in params:
            path_params['webhookID'] = params['webhook_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stacks/webhooks/{webhookID}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
