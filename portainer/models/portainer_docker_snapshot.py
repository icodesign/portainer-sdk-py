# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class PortainerDockerSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'docker_snapshot_raw': 'PortainerDockerSnapshotRaw',
        'docker_version': 'str',
        'healthy_container_count': 'int',
        'image_count': 'int',
        'node_count': 'int',
        'running_container_count': 'int',
        'service_count': 'int',
        'stack_count': 'int',
        'stopped_container_count': 'int',
        'swarm': 'bool',
        'time': 'int',
        'total_cpu': 'int',
        'total_memory': 'int',
        'unhealthy_container_count': 'int',
        'volume_count': 'int'
    }

    attribute_map = {
        'docker_snapshot_raw': 'DockerSnapshotRaw',
        'docker_version': 'DockerVersion',
        'healthy_container_count': 'HealthyContainerCount',
        'image_count': 'ImageCount',
        'node_count': 'NodeCount',
        'running_container_count': 'RunningContainerCount',
        'service_count': 'ServiceCount',
        'stack_count': 'StackCount',
        'stopped_container_count': 'StoppedContainerCount',
        'swarm': 'Swarm',
        'time': 'Time',
        'total_cpu': 'TotalCPU',
        'total_memory': 'TotalMemory',
        'unhealthy_container_count': 'UnhealthyContainerCount',
        'volume_count': 'VolumeCount'
    }

    def __init__(self, docker_snapshot_raw=None, docker_version=None, healthy_container_count=None, image_count=None, node_count=None, running_container_count=None, service_count=None, stack_count=None, stopped_container_count=None, swarm=None, time=None, total_cpu=None, total_memory=None, unhealthy_container_count=None, volume_count=None, _configuration=None):  # noqa: E501
        """PortainerDockerSnapshot - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._docker_snapshot_raw = None
        self._docker_version = None
        self._healthy_container_count = None
        self._image_count = None
        self._node_count = None
        self._running_container_count = None
        self._service_count = None
        self._stack_count = None
        self._stopped_container_count = None
        self._swarm = None
        self._time = None
        self._total_cpu = None
        self._total_memory = None
        self._unhealthy_container_count = None
        self._volume_count = None
        self.discriminator = None

        if docker_snapshot_raw is not None:
            self.docker_snapshot_raw = docker_snapshot_raw
        if docker_version is not None:
            self.docker_version = docker_version
        if healthy_container_count is not None:
            self.healthy_container_count = healthy_container_count
        if image_count is not None:
            self.image_count = image_count
        if node_count is not None:
            self.node_count = node_count
        if running_container_count is not None:
            self.running_container_count = running_container_count
        if service_count is not None:
            self.service_count = service_count
        if stack_count is not None:
            self.stack_count = stack_count
        if stopped_container_count is not None:
            self.stopped_container_count = stopped_container_count
        if swarm is not None:
            self.swarm = swarm
        if time is not None:
            self.time = time
        if total_cpu is not None:
            self.total_cpu = total_cpu
        if total_memory is not None:
            self.total_memory = total_memory
        if unhealthy_container_count is not None:
            self.unhealthy_container_count = unhealthy_container_count
        if volume_count is not None:
            self.volume_count = volume_count

    @property
    def docker_snapshot_raw(self):
        """Gets the docker_snapshot_raw of this PortainerDockerSnapshot.  # noqa: E501


        :return: The docker_snapshot_raw of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: PortainerDockerSnapshotRaw
        """
        return self._docker_snapshot_raw

    @docker_snapshot_raw.setter
    def docker_snapshot_raw(self, docker_snapshot_raw):
        """Sets the docker_snapshot_raw of this PortainerDockerSnapshot.


        :param docker_snapshot_raw: The docker_snapshot_raw of this PortainerDockerSnapshot.  # noqa: E501
        :type: PortainerDockerSnapshotRaw
        """

        self._docker_snapshot_raw = docker_snapshot_raw

    @property
    def docker_version(self):
        """Gets the docker_version of this PortainerDockerSnapshot.  # noqa: E501


        :return: The docker_version of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._docker_version

    @docker_version.setter
    def docker_version(self, docker_version):
        """Sets the docker_version of this PortainerDockerSnapshot.


        :param docker_version: The docker_version of this PortainerDockerSnapshot.  # noqa: E501
        :type: str
        """

        self._docker_version = docker_version

    @property
    def healthy_container_count(self):
        """Gets the healthy_container_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The healthy_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._healthy_container_count

    @healthy_container_count.setter
    def healthy_container_count(self, healthy_container_count):
        """Sets the healthy_container_count of this PortainerDockerSnapshot.


        :param healthy_container_count: The healthy_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._healthy_container_count = healthy_container_count

    @property
    def image_count(self):
        """Gets the image_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The image_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._image_count

    @image_count.setter
    def image_count(self, image_count):
        """Sets the image_count of this PortainerDockerSnapshot.


        :param image_count: The image_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._image_count = image_count

    @property
    def node_count(self):
        """Gets the node_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The node_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this PortainerDockerSnapshot.


        :param node_count: The node_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._node_count = node_count

    @property
    def running_container_count(self):
        """Gets the running_container_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The running_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._running_container_count

    @running_container_count.setter
    def running_container_count(self, running_container_count):
        """Sets the running_container_count of this PortainerDockerSnapshot.


        :param running_container_count: The running_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._running_container_count = running_container_count

    @property
    def service_count(self):
        """Gets the service_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The service_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._service_count

    @service_count.setter
    def service_count(self, service_count):
        """Sets the service_count of this PortainerDockerSnapshot.


        :param service_count: The service_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._service_count = service_count

    @property
    def stack_count(self):
        """Gets the stack_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The stack_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._stack_count

    @stack_count.setter
    def stack_count(self, stack_count):
        """Sets the stack_count of this PortainerDockerSnapshot.


        :param stack_count: The stack_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._stack_count = stack_count

    @property
    def stopped_container_count(self):
        """Gets the stopped_container_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The stopped_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._stopped_container_count

    @stopped_container_count.setter
    def stopped_container_count(self, stopped_container_count):
        """Sets the stopped_container_count of this PortainerDockerSnapshot.


        :param stopped_container_count: The stopped_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._stopped_container_count = stopped_container_count

    @property
    def swarm(self):
        """Gets the swarm of this PortainerDockerSnapshot.  # noqa: E501


        :return: The swarm of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: bool
        """
        return self._swarm

    @swarm.setter
    def swarm(self, swarm):
        """Sets the swarm of this PortainerDockerSnapshot.


        :param swarm: The swarm of this PortainerDockerSnapshot.  # noqa: E501
        :type: bool
        """

        self._swarm = swarm

    @property
    def time(self):
        """Gets the time of this PortainerDockerSnapshot.  # noqa: E501


        :return: The time of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this PortainerDockerSnapshot.


        :param time: The time of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def total_cpu(self):
        """Gets the total_cpu of this PortainerDockerSnapshot.  # noqa: E501


        :return: The total_cpu of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._total_cpu

    @total_cpu.setter
    def total_cpu(self, total_cpu):
        """Sets the total_cpu of this PortainerDockerSnapshot.


        :param total_cpu: The total_cpu of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._total_cpu = total_cpu

    @property
    def total_memory(self):
        """Gets the total_memory of this PortainerDockerSnapshot.  # noqa: E501


        :return: The total_memory of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._total_memory

    @total_memory.setter
    def total_memory(self, total_memory):
        """Sets the total_memory of this PortainerDockerSnapshot.


        :param total_memory: The total_memory of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._total_memory = total_memory

    @property
    def unhealthy_container_count(self):
        """Gets the unhealthy_container_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The unhealthy_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._unhealthy_container_count

    @unhealthy_container_count.setter
    def unhealthy_container_count(self, unhealthy_container_count):
        """Sets the unhealthy_container_count of this PortainerDockerSnapshot.


        :param unhealthy_container_count: The unhealthy_container_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._unhealthy_container_count = unhealthy_container_count

    @property
    def volume_count(self):
        """Gets the volume_count of this PortainerDockerSnapshot.  # noqa: E501


        :return: The volume_count of this PortainerDockerSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._volume_count

    @volume_count.setter
    def volume_count(self, volume_count):
        """Sets the volume_count of this PortainerDockerSnapshot.


        :param volume_count: The volume_count of this PortainerDockerSnapshot.  # noqa: E501
        :type: int
        """

        self._volume_count = volume_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PortainerDockerSnapshot, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortainerDockerSnapshot):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PortainerDockerSnapshot):
            return True

        return self.to_dict() != other.to_dict()
