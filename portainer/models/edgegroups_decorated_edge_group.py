# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class EdgegroupsDecoratedEdgeGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dynamic': 'bool',
        'endpoints': 'list[int]',
        'has_edge_stack': 'bool',
        'id': 'int',
        'name': 'str',
        'partial_match': 'bool',
        'tag_ids': 'list[int]',
        'endpoint_types': 'list[int]'
    }

    attribute_map = {
        'dynamic': 'Dynamic',
        'endpoints': 'Endpoints',
        'has_edge_stack': 'HasEdgeStack',
        'id': 'Id',
        'name': 'Name',
        'partial_match': 'PartialMatch',
        'tag_ids': 'TagIds',
        'endpoint_types': 'endpointTypes'
    }

    def __init__(self, dynamic=None, endpoints=None, has_edge_stack=None, id=None, name=None, partial_match=None, tag_ids=None, endpoint_types=None, _configuration=None):  # noqa: E501
        """EdgegroupsDecoratedEdgeGroup - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._dynamic = None
        self._endpoints = None
        self._has_edge_stack = None
        self._id = None
        self._name = None
        self._partial_match = None
        self._tag_ids = None
        self._endpoint_types = None
        self.discriminator = None

        if dynamic is not None:
            self.dynamic = dynamic
        if endpoints is not None:
            self.endpoints = endpoints
        if has_edge_stack is not None:
            self.has_edge_stack = has_edge_stack
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if partial_match is not None:
            self.partial_match = partial_match
        if tag_ids is not None:
            self.tag_ids = tag_ids
        if endpoint_types is not None:
            self.endpoint_types = endpoint_types

    @property
    def dynamic(self):
        """Gets the dynamic of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The dynamic of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic

    @dynamic.setter
    def dynamic(self, dynamic):
        """Sets the dynamic of this EdgegroupsDecoratedEdgeGroup.


        :param dynamic: The dynamic of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: bool
        """

        self._dynamic = dynamic

    @property
    def endpoints(self):
        """Gets the endpoints of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The endpoints of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this EdgegroupsDecoratedEdgeGroup.


        :param endpoints: The endpoints of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: list[int]
        """

        self._endpoints = endpoints

    @property
    def has_edge_stack(self):
        """Gets the has_edge_stack of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The has_edge_stack of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: bool
        """
        return self._has_edge_stack

    @has_edge_stack.setter
    def has_edge_stack(self, has_edge_stack):
        """Sets the has_edge_stack of this EdgegroupsDecoratedEdgeGroup.


        :param has_edge_stack: The has_edge_stack of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: bool
        """

        self._has_edge_stack = has_edge_stack

    @property
    def id(self):
        """Gets the id of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501

        EdgeGroup Identifier  # noqa: E501

        :return: The id of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdgegroupsDecoratedEdgeGroup.

        EdgeGroup Identifier  # noqa: E501

        :param id: The id of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The name of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EdgegroupsDecoratedEdgeGroup.


        :param name: The name of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partial_match(self):
        """Gets the partial_match of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The partial_match of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: bool
        """
        return self._partial_match

    @partial_match.setter
    def partial_match(self, partial_match):
        """Sets the partial_match of this EdgegroupsDecoratedEdgeGroup.


        :param partial_match: The partial_match of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: bool
        """

        self._partial_match = partial_match

    @property
    def tag_ids(self):
        """Gets the tag_ids of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The tag_ids of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_ids

    @tag_ids.setter
    def tag_ids(self, tag_ids):
        """Sets the tag_ids of this EdgegroupsDecoratedEdgeGroup.


        :param tag_ids: The tag_ids of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: list[int]
        """

        self._tag_ids = tag_ids

    @property
    def endpoint_types(self):
        """Gets the endpoint_types of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501


        :return: The endpoint_types of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._endpoint_types

    @endpoint_types.setter
    def endpoint_types(self, endpoint_types):
        """Sets the endpoint_types of this EdgegroupsDecoratedEdgeGroup.


        :param endpoint_types: The endpoint_types of this EdgegroupsDecoratedEdgeGroup.  # noqa: E501
        :type: list[int]
        """

        self._endpoint_types = endpoint_types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdgegroupsDecoratedEdgeGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdgegroupsDecoratedEdgeGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdgegroupsDecoratedEdgeGroup):
            return True

        return self.to_dict() != other.to_dict()
