# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class SettingsPublicSettingsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication_method': 'int',
        'enable_edge_compute_features': 'bool',
        'enable_telemetry': 'bool',
        'features': 'dict(str, bool)',
        'logo_url': 'str',
        'o_auth_login_uri': 'str',
        'o_auth_logout_uri': 'str',
        'kubeconfig_expiry': 'str'
    }

    attribute_map = {
        'authentication_method': 'AuthenticationMethod',
        'enable_edge_compute_features': 'EnableEdgeComputeFeatures',
        'enable_telemetry': 'EnableTelemetry',
        'features': 'Features',
        'logo_url': 'LogoURL',
        'o_auth_login_uri': 'OAuthLoginURI',
        'o_auth_logout_uri': 'OAuthLogoutURI',
        'kubeconfig_expiry': 'kubeconfigExpiry'
    }

    def __init__(self, authentication_method=None, enable_edge_compute_features=None, enable_telemetry=None, features=None, logo_url=None, o_auth_login_uri=None, o_auth_logout_uri=None, kubeconfig_expiry='0', _configuration=None):  # noqa: E501
        """SettingsPublicSettingsResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._authentication_method = None
        self._enable_edge_compute_features = None
        self._enable_telemetry = None
        self._features = None
        self._logo_url = None
        self._o_auth_login_uri = None
        self._o_auth_logout_uri = None
        self._kubeconfig_expiry = None
        self.discriminator = None

        if authentication_method is not None:
            self.authentication_method = authentication_method
        if enable_edge_compute_features is not None:
            self.enable_edge_compute_features = enable_edge_compute_features
        if enable_telemetry is not None:
            self.enable_telemetry = enable_telemetry
        if features is not None:
            self.features = features
        if logo_url is not None:
            self.logo_url = logo_url
        if o_auth_login_uri is not None:
            self.o_auth_login_uri = o_auth_login_uri
        if o_auth_logout_uri is not None:
            self.o_auth_logout_uri = o_auth_logout_uri
        if kubeconfig_expiry is not None:
            self.kubeconfig_expiry = kubeconfig_expiry

    @property
    def authentication_method(self):
        """Gets the authentication_method of this SettingsPublicSettingsResponse.  # noqa: E501

        Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth  # noqa: E501

        :return: The authentication_method of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: int
        """
        return self._authentication_method

    @authentication_method.setter
    def authentication_method(self, authentication_method):
        """Sets the authentication_method of this SettingsPublicSettingsResponse.

        Active authentication method for the Portainer instance. Valid values are: 1 for internal, 2 for LDAP, or 3 for oauth  # noqa: E501

        :param authentication_method: The authentication_method of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: int
        """

        self._authentication_method = authentication_method

    @property
    def enable_edge_compute_features(self):
        """Gets the enable_edge_compute_features of this SettingsPublicSettingsResponse.  # noqa: E501

        Whether edge compute features are enabled  # noqa: E501

        :return: The enable_edge_compute_features of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_edge_compute_features

    @enable_edge_compute_features.setter
    def enable_edge_compute_features(self, enable_edge_compute_features):
        """Sets the enable_edge_compute_features of this SettingsPublicSettingsResponse.

        Whether edge compute features are enabled  # noqa: E501

        :param enable_edge_compute_features: The enable_edge_compute_features of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: bool
        """

        self._enable_edge_compute_features = enable_edge_compute_features

    @property
    def enable_telemetry(self):
        """Gets the enable_telemetry of this SettingsPublicSettingsResponse.  # noqa: E501

        Whether telemetry is enabled  # noqa: E501

        :return: The enable_telemetry of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: bool
        """
        return self._enable_telemetry

    @enable_telemetry.setter
    def enable_telemetry(self, enable_telemetry):
        """Sets the enable_telemetry of this SettingsPublicSettingsResponse.

        Whether telemetry is enabled  # noqa: E501

        :param enable_telemetry: The enable_telemetry of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: bool
        """

        self._enable_telemetry = enable_telemetry

    @property
    def features(self):
        """Gets the features of this SettingsPublicSettingsResponse.  # noqa: E501

        Supported feature flags  # noqa: E501

        :return: The features of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this SettingsPublicSettingsResponse.

        Supported feature flags  # noqa: E501

        :param features: The features of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: dict(str, bool)
        """

        self._features = features

    @property
    def logo_url(self):
        """Gets the logo_url of this SettingsPublicSettingsResponse.  # noqa: E501

        URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string  # noqa: E501

        :return: The logo_url of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this SettingsPublicSettingsResponse.

        URL to a logo that will be displayed on the login page as well as on top of the sidebar. Will use default Portainer logo when value is empty string  # noqa: E501

        :param logo_url: The logo_url of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def o_auth_login_uri(self):
        """Gets the o_auth_login_uri of this SettingsPublicSettingsResponse.  # noqa: E501

        The URL used for oauth login  # noqa: E501

        :return: The o_auth_login_uri of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._o_auth_login_uri

    @o_auth_login_uri.setter
    def o_auth_login_uri(self, o_auth_login_uri):
        """Sets the o_auth_login_uri of this SettingsPublicSettingsResponse.

        The URL used for oauth login  # noqa: E501

        :param o_auth_login_uri: The o_auth_login_uri of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: str
        """

        self._o_auth_login_uri = o_auth_login_uri

    @property
    def o_auth_logout_uri(self):
        """Gets the o_auth_logout_uri of this SettingsPublicSettingsResponse.  # noqa: E501

        The URL used for oauth logout  # noqa: E501

        :return: The o_auth_logout_uri of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._o_auth_logout_uri

    @o_auth_logout_uri.setter
    def o_auth_logout_uri(self, o_auth_logout_uri):
        """Sets the o_auth_logout_uri of this SettingsPublicSettingsResponse.

        The URL used for oauth logout  # noqa: E501

        :param o_auth_logout_uri: The o_auth_logout_uri of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: str
        """

        self._o_auth_logout_uri = o_auth_logout_uri

    @property
    def kubeconfig_expiry(self):
        """Gets the kubeconfig_expiry of this SettingsPublicSettingsResponse.  # noqa: E501

        The expiry of a Kubeconfig  # noqa: E501

        :return: The kubeconfig_expiry of this SettingsPublicSettingsResponse.  # noqa: E501
        :rtype: str
        """
        return self._kubeconfig_expiry

    @kubeconfig_expiry.setter
    def kubeconfig_expiry(self, kubeconfig_expiry):
        """Sets the kubeconfig_expiry of this SettingsPublicSettingsResponse.

        The expiry of a Kubeconfig  # noqa: E501

        :param kubeconfig_expiry: The kubeconfig_expiry of this SettingsPublicSettingsResponse.  # noqa: E501
        :type: str
        """

        self._kubeconfig_expiry = kubeconfig_expiry

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingsPublicSettingsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingsPublicSettingsResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SettingsPublicSettingsResponse):
            return True

        return self.to_dict() != other.to_dict()
