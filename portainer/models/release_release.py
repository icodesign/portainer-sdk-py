# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class ReleaseRelease(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chart': 'ReleaseChart',
        'config': 'object',
        'hooks': 'list[ReleaseHook]',
        'manifest': 'str',
        'name': 'str',
        'namespace': 'str',
        'version': 'int'
    }

    attribute_map = {
        'chart': 'chart',
        'config': 'config',
        'hooks': 'hooks',
        'manifest': 'manifest',
        'name': 'name',
        'namespace': 'namespace',
        'version': 'version'
    }

    def __init__(self, chart=None, config=None, hooks=None, manifest=None, name=None, namespace=None, version=None, _configuration=None):  # noqa: E501
        """ReleaseRelease - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._chart = None
        self._config = None
        self._hooks = None
        self._manifest = None
        self._name = None
        self._namespace = None
        self._version = None
        self.discriminator = None

        if chart is not None:
            self.chart = chart
        if config is not None:
            self.config = config
        if hooks is not None:
            self.hooks = hooks
        if manifest is not None:
            self.manifest = manifest
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if version is not None:
            self.version = version

    @property
    def chart(self):
        """Gets the chart of this ReleaseRelease.  # noqa: E501

        Info provides information about a release Info *Info `json:\"info,omitempty\"` Chart is the chart that was released.  # noqa: E501

        :return: The chart of this ReleaseRelease.  # noqa: E501
        :rtype: ReleaseChart
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this ReleaseRelease.

        Info provides information about a release Info *Info `json:\"info,omitempty\"` Chart is the chart that was released.  # noqa: E501

        :param chart: The chart of this ReleaseRelease.  # noqa: E501
        :type: ReleaseChart
        """

        self._chart = chart

    @property
    def config(self):
        """Gets the config of this ReleaseRelease.  # noqa: E501

        Config is the set of extra Values added to the chart. These values override the default values inside of the chart.  # noqa: E501

        :return: The config of this ReleaseRelease.  # noqa: E501
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this ReleaseRelease.

        Config is the set of extra Values added to the chart. These values override the default values inside of the chart.  # noqa: E501

        :param config: The config of this ReleaseRelease.  # noqa: E501
        :type: object
        """

        self._config = config

    @property
    def hooks(self):
        """Gets the hooks of this ReleaseRelease.  # noqa: E501

        Hooks are all of the hooks declared for this release.  # noqa: E501

        :return: The hooks of this ReleaseRelease.  # noqa: E501
        :rtype: list[ReleaseHook]
        """
        return self._hooks

    @hooks.setter
    def hooks(self, hooks):
        """Sets the hooks of this ReleaseRelease.

        Hooks are all of the hooks declared for this release.  # noqa: E501

        :param hooks: The hooks of this ReleaseRelease.  # noqa: E501
        :type: list[ReleaseHook]
        """

        self._hooks = hooks

    @property
    def manifest(self):
        """Gets the manifest of this ReleaseRelease.  # noqa: E501

        Manifest is the string representation of the rendered template.  # noqa: E501

        :return: The manifest of this ReleaseRelease.  # noqa: E501
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ReleaseRelease.

        Manifest is the string representation of the rendered template.  # noqa: E501

        :param manifest: The manifest of this ReleaseRelease.  # noqa: E501
        :type: str
        """

        self._manifest = manifest

    @property
    def name(self):
        """Gets the name of this ReleaseRelease.  # noqa: E501

        Name is the name of the release  # noqa: E501

        :return: The name of this ReleaseRelease.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseRelease.

        Name is the name of the release  # noqa: E501

        :param name: The name of this ReleaseRelease.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ReleaseRelease.  # noqa: E501

        Namespace is the kubernetes namespace of the release.  # noqa: E501

        :return: The namespace of this ReleaseRelease.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ReleaseRelease.

        Namespace is the kubernetes namespace of the release.  # noqa: E501

        :param namespace: The namespace of this ReleaseRelease.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def version(self):
        """Gets the version of this ReleaseRelease.  # noqa: E501

        Version is an int which represents the revision of the release.  # noqa: E501

        :return: The version of this ReleaseRelease.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseRelease.

        Version is an int which represents the revision of the release.  # noqa: E501

        :param version: The version of this ReleaseRelease.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseRelease, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseRelease):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleaseRelease):
            return True

        return self.to_dict() != other.to_dict()
