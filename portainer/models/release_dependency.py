# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class ReleaseDependency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'condition': 'str',
        'enabled': 'bool',
        'import_values': 'list[object]',
        'name': 'str',
        'repository': 'str',
        'tags': 'list[str]',
        'version': 'str'
    }

    attribute_map = {
        'alias': 'alias',
        'condition': 'condition',
        'enabled': 'enabled',
        'import_values': 'import-values',
        'name': 'name',
        'repository': 'repository',
        'tags': 'tags',
        'version': 'version'
    }

    def __init__(self, alias=None, condition=None, enabled=None, import_values=None, name=None, repository=None, tags=None, version=None, _configuration=None):  # noqa: E501
        """ReleaseDependency - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._alias = None
        self._condition = None
        self._enabled = None
        self._import_values = None
        self._name = None
        self._repository = None
        self._tags = None
        self._version = None
        self.discriminator = None

        if alias is not None:
            self.alias = alias
        if condition is not None:
            self.condition = condition
        if enabled is not None:
            self.enabled = enabled
        if import_values is not None:
            self.import_values = import_values
        if name is not None:
            self.name = name
        if repository is not None:
            self.repository = repository
        if tags is not None:
            self.tags = tags
        if version is not None:
            self.version = version

    @property
    def alias(self):
        """Gets the alias of this ReleaseDependency.  # noqa: E501

        Alias usable alias to be used for the chart  # noqa: E501

        :return: The alias of this ReleaseDependency.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ReleaseDependency.

        Alias usable alias to be used for the chart  # noqa: E501

        :param alias: The alias of this ReleaseDependency.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def condition(self):
        """Gets the condition of this ReleaseDependency.  # noqa: E501

        A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )  # noqa: E501

        :return: The condition of this ReleaseDependency.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this ReleaseDependency.

        A yaml path that resolves to a boolean, used for enabling/disabling charts (e.g. subchart1.enabled )  # noqa: E501

        :param condition: The condition of this ReleaseDependency.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def enabled(self):
        """Gets the enabled of this ReleaseDependency.  # noqa: E501

        Enabled bool determines if chart should be loaded  # noqa: E501

        :return: The enabled of this ReleaseDependency.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ReleaseDependency.

        Enabled bool determines if chart should be loaded  # noqa: E501

        :param enabled: The enabled of this ReleaseDependency.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def import_values(self):
        """Gets the import_values of this ReleaseDependency.  # noqa: E501

        ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.  # noqa: E501

        :return: The import_values of this ReleaseDependency.  # noqa: E501
        :rtype: list[object]
        """
        return self._import_values

    @import_values.setter
    def import_values(self, import_values):
        """Sets the import_values of this ReleaseDependency.

        ImportValues holds the mapping of source values to parent key to be imported. Each item can be a string or pair of child/parent sublist items.  # noqa: E501

        :param import_values: The import_values of this ReleaseDependency.  # noqa: E501
        :type: list[object]
        """

        self._import_values = import_values

    @property
    def name(self):
        """Gets the name of this ReleaseDependency.  # noqa: E501

        Name is the name of the dependency.  This must mach the name in the dependency's Chart.yaml.  # noqa: E501

        :return: The name of this ReleaseDependency.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseDependency.

        Name is the name of the dependency.  This must mach the name in the dependency's Chart.yaml.  # noqa: E501

        :param name: The name of this ReleaseDependency.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repository(self):
        """Gets the repository of this ReleaseDependency.  # noqa: E501

        The URL to the repository.  Appending `index.yaml` to this string should result in a URL that can be used to fetch the repository index.  # noqa: E501

        :return: The repository of this ReleaseDependency.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this ReleaseDependency.

        The URL to the repository.  Appending `index.yaml` to this string should result in a URL that can be used to fetch the repository index.  # noqa: E501

        :param repository: The repository of this ReleaseDependency.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def tags(self):
        """Gets the tags of this ReleaseDependency.  # noqa: E501

        Tags can be used to group charts for enabling/disabling together  # noqa: E501

        :return: The tags of this ReleaseDependency.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ReleaseDependency.

        Tags can be used to group charts for enabling/disabling together  # noqa: E501

        :param tags: The tags of this ReleaseDependency.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def version(self):
        """Gets the version of this ReleaseDependency.  # noqa: E501

        Version is the version (range) of this chart.  A lock file will always produce a single version, while a dependency may contain a semantic version range.  # noqa: E501

        :return: The version of this ReleaseDependency.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ReleaseDependency.

        Version is the version (range) of this chart.  A lock file will always produce a single version, while a dependency may contain a semantic version range.  # noqa: E501

        :param version: The version of this ReleaseDependency.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseDependency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseDependency):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleaseDependency):
            return True

        return self.to_dict() != other.to_dict()
