# coding: utf-8

"""
    PortainerCE API

    Portainer API is an HTTP API served by Portainer. It is used by the Portainer UI and everything you can do with the UI can be done using the HTTP API. Examples are available at https://documentation.portainer.io/api/api-examples/ You can find out more about Portainer at [http://portainer.io](http://portainer.io) and get some support on [Slack](http://portainer.io/slack/).  # Authentication  Most of the API environments(endpoints) require to be authenticated as well as some level of authorization to be used. Portainer API uses JSON Web Token to manage authentication and thus requires you to provide a token in the **Authorization** header of each request with the **Bearer** authentication mechanism.  Example:  ``` Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGUiOjEsImV4cCI6MTQ5OTM3NjE1NH0.NJ6vE8FY1WG6jsRQzfMqeatJ4vh2TWAeeYfDhP71YEE ```  # Security  Each API environment(endpoint) has an associated access policy, it is documented in the description of each environment(endpoint).  Different access policies are available:  - Public access - Authenticated access - Restricted access - Administrator access  ### Public access  No authentication is required to access the environments(endpoints) with this access policy.  ### Authenticated access  Authentication is required to access the environments(endpoints) with this access policy.  ### Restricted access  Authentication is required to access the environments(endpoints) with this access policy. Extra-checks might be added to ensure access to the resource is granted. Returned data might also be filtered.  ### Administrator access  Authentication as well as an administrator role are required to access the environments(endpoints) with this access policy.  # Execute Docker requests  Portainer **DO NOT** expose specific environments(endpoints) to manage your Docker resources (create a container, remove a volume, etc...).  Instead, it acts as a reverse-proxy to the Docker HTTP API. This means that you can execute Docker requests **via** the Portainer HTTP API.  To do so, you can use the `/endpoints/{id}/docker` Portainer API environment(endpoint) (which is not documented below due to Swagger limitations). This environment(endpoint) has a restricted access policy so you still need to be authenticated to be able to query this environment(endpoint). Any query on this environment(endpoint) will be proxied to the Docker API of the associated environment(endpoint) (requests and responses objects are the same as documented in the Docker API).  **NOTE**: You can find more information on how to query the Docker API in the [Docker official documentation](https://docs.docker.com/engine/api/v1.30/) as well as in [this Portainer example](https://documentation.portainer.io/api/api-examples/).   # noqa: E501

    OpenAPI spec version: 2.11.0
    Contact: info@portainer.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from portainer.configuration import Configuration


class ReleaseReleaseElement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'app_version': 'str',
        'chart': 'str',
        'name': 'str',
        'namespace': 'str',
        'revision': 'str',
        'status': 'str',
        'updated': 'str'
    }

    attribute_map = {
        'app_version': 'app_version',
        'chart': 'chart',
        'name': 'name',
        'namespace': 'namespace',
        'revision': 'revision',
        'status': 'status',
        'updated': 'updated'
    }

    def __init__(self, app_version=None, chart=None, name=None, namespace=None, revision=None, status=None, updated=None, _configuration=None):  # noqa: E501
        """ReleaseReleaseElement - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._app_version = None
        self._chart = None
        self._name = None
        self._namespace = None
        self._revision = None
        self._status = None
        self._updated = None
        self.discriminator = None

        if app_version is not None:
            self.app_version = app_version
        if chart is not None:
            self.chart = chart
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if revision is not None:
            self.revision = revision
        if status is not None:
            self.status = status
        if updated is not None:
            self.updated = updated

    @property
    def app_version(self):
        """Gets the app_version of this ReleaseReleaseElement.  # noqa: E501


        :return: The app_version of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this ReleaseReleaseElement.


        :param app_version: The app_version of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    @property
    def chart(self):
        """Gets the chart of this ReleaseReleaseElement.  # noqa: E501


        :return: The chart of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._chart

    @chart.setter
    def chart(self, chart):
        """Sets the chart of this ReleaseReleaseElement.


        :param chart: The chart of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._chart = chart

    @property
    def name(self):
        """Gets the name of this ReleaseReleaseElement.  # noqa: E501


        :return: The name of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReleaseReleaseElement.


        :param name: The name of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this ReleaseReleaseElement.  # noqa: E501


        :return: The namespace of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this ReleaseReleaseElement.


        :param namespace: The namespace of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def revision(self):
        """Gets the revision of this ReleaseReleaseElement.  # noqa: E501


        :return: The revision of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ReleaseReleaseElement.


        :param revision: The revision of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def status(self):
        """Gets the status of this ReleaseReleaseElement.  # noqa: E501


        :return: The status of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReleaseReleaseElement.


        :param status: The status of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this ReleaseReleaseElement.  # noqa: E501


        :return: The updated of this ReleaseReleaseElement.  # noqa: E501
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ReleaseReleaseElement.


        :param updated: The updated of this ReleaseReleaseElement.  # noqa: E501
        :type: str
        """

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReleaseReleaseElement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseReleaseElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReleaseReleaseElement):
            return True

        return self.to_dict() != other.to_dict()
